#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue Mar  7 11:55:36 2018
@author: samer
"""

import csv
import cv2
import copy
import torch
import scipy
import scipy.ndimage
import random
import torchvision
import numpy as np
import torchvision.transforms as transforms
from torch.utils.data import Dataset, DataLoader
from torchvision import utils

# # NOTE: MASTER LIST. DO NOT ALTER. ONLY COPY.

# # Lost Poses
# ["UST-10LX/", "2016-08-17-12-48-06", 403], 
# ["UST-10LX/", "2016-08-17-12-56-32", 544], 
# ["UST-10LX/", "2016-08-17-12-57-16", 835],
# ["UST-10LX/", "2016-08-17-12-57-54", 672],
# ["UST-10LX/", "2016-08-17-12-58-32", 1191],
#
# # Small Loop
# ["UST-10LX/", "2016-04-17-20-32-59", 2723],
# ["UST-10LX/", "2016-04-17-20-34-16", 2332],
# ["UST-10LX/", "2016-08-17-13-08-32", 2649],
# ["UST-10LX/", "2016-08-17-13-16-56", 2832],
# ["UST-10LX/", "2016-08-17-13-18-08", 3283],
#
# # Figure 8
# ["UST-10LX/", "2016-02-16-15-46-43", 8971],
# ["UST-10LX/", "2016-02-16-16-01-46", 9799],
# ["UST-10LX/", "2016-02-16-16-17-06", 7251],
# ["UST-10LX/", "2016-02-16-21-18-05", 6498],
# ["UST-10LX/", "2016-02-16-21-20-53", 9099],
#
# # Big Map
# ["UST-10LX/", "2016-08-17-22-05-52", 67149]]
#
# # ^ UST-10LX ^
# ##############
# # v URG-04LX v
#
# # 2011-09
# ["URG-04LX/2011-09/", "2011-09-22-21-09-14", 1049],
# ["URG-04LX/2011-09/", "2011-09-22-21-10-59", 2692],
# ["URG-04LX/2011-09/", "2011-09-22-21-15-27", 1518],
# ["URG-04LX/2011-09/", "2011-09-22-21-20-59", 1989],
# ["URG-04LX/2011-09/", "2011-09-22-21-24-18", 1077],
# ["URG-04LX/2011-09/", "2011-09-22-21-26-05", 3623],
# ["URG-04LX/2011-09/", "2011-09-23-15-43-54", 658],
# ["URG-04LX/2011-09/", "2011-09-23-15-45-00", 2584],
# ["URG-04LX/2011-09/", "2011-09-23-17-10-21", 4458],
# ["URG-04LX/2011-09/", "2011-09-23-17-17-46", 2612],
# ["URG-04LX/2011-09/", "2011-09-23-17-22-06", 4538],
# ["URG-04LX/2011-09/", "2011-09-23-17-29-38", 4632],
# ["URG-04LX/2011-09/", "2011-09-23-17-37-19", 4094],
# ["URG-04LX/2011-09/", "2011-09-23-17-44-07", 1218],
# ["URG-04LX/2011-09/", "2011-09-23-17-46-09", 836],
# ["URG-04LX/2011-09/", "2011-09-23-17-47-34", 1915],
# ["URG-04LX/2011-09/", "2011-09-23-17-50-45", 727],
# ["URG-04LX/2011-09/", "2011-09-23-17-54-35", 2510],
# ["URG-04LX/2011-09/", "2011-09-23-17-58-45", 2796],
# ["URG-04LX/2011-09/", "2011-09-23-18-03-23", 4062],
# ["URG-04LX/2011-09/", "2011-09-23-18-10-08", 1003],
# ["URG-04LX/2011-09/", "2011-09-23-18-12-00", 3397],
# ["URG-04LX/2011-09/", "2011-09-23-18-17-39", 6260],
# ["URG-04LX/2011-09/", "2011-09-23-18-28-04", 2456],
# ["URG-04LX/2011-09/", "2011-09-23-18-32-09", 5591],
# ["URG-04LX/2011-09/", "2011-09-23-18-57-30", 1415],
# ["URG-04LX/2011-09/", "2011-09-23-18-59-51", 13697],
# ["URG-04LX/2011-09/", "2011-09-23-19-22-35", 2681],
# ["URG-04LX/2011-09/", "2011-09-23-19-27-02", 6122],
# ["URG-04LX/2011-09/", "2011-09-23-19-37-12", 7548],
# ["URG-04LX/2011-09/", "2011-09-23-19-57-39", 1751],
# ["URG-04LX/2011-09/", "2011-09-26-13-52-07", 17269],
# ["URG-04LX/2011-09/", "2011-09-26-14-20-48", 2867],
# ["URG-04LX/2011-09/", "2011-09-26-14-25-33", 7630],
# ["URG-04LX/2011-09/", "2011-09-26-14-38-13", 2650],
# ["URG-04LX/2011-09/", "2011-09-26-14-42-37", 40476],
# ["URG-04LX/2011-09/", "2011-09-26-15-49-48", 3552],
# ["URG-04LX/2011-09/", "2011-09-26-15-55-42", 4259],
# ["URG-04LX/2011-09/", "2011-09-26-16-02-46", 4147],
# ["URG-04LX/2011-09/", "2011-09-26-16-09-41", 1194],
# ["URG-04LX/2011-09/", "2011-09-26-16-11-40", 993],
# ["URG-04LX/2011-09/", "2011-09-26-17-50-29", 4681],
# ["URG-04LX/2011-09/", "2011-09-26-20-31-33", 3724],
# ["URG-04LX/2011-09/", "2011-09-26-20-38-00", 1964],
# ["URG-04LX/2011-09/", "2011-09-26-20-43-53", 3791],
# ["URG-04LX/2011-09/", "2011-09-26-22-01-34", 1561],
# ["URG-04LX/2011-09/", "2011-09-26-22-04-13", 1468],
# ["URG-04LX/2011-09/", "2011-09-26-22-06-39", 3066],
# ["URG-04LX/2011-09/", "2011-09-27-15-46-28", 13748],
# ["URG-04LX/2011-09/", "2011-09-27-16-19-58", 7397],
# ["URG-04LX/2011-09/", "2011-09-27-16-33-58", 6930],
# ["URG-04LX/2011-09/", "2011-09-27-16-45-28", 627],
# ["URG-04LX/2011-09/", "2011-09-27-18-00-20", 3975],
# ["URG-04LX/2011-09/", "2011-09-27-18-06-57", 1197],
# ["URG-04LX/2011-09/", "2011-09-27-18-08-57", 6139],
# ["URG-04LX/2011-09/", "2011-09-27-18-19-08", 2464],
# ["URG-04LX/2011-09/", "2011-09-27-18-23-14", 1604],
# ["URG-04LX/2011-09/", "2011-09-27-18-25-53", 4864],
# ["URG-04LX/2011-09/", "2011-09-27-18-33-58", 4468],
# ["URG-04LX/2011-09/", "2011-09-27-18-41-23", 4360],
# ["URG-04LX/2011-09/", "2011-09-27-18-48-38", 3402],
# ["URG-04LX/2011-09/", "2011-09-27-18-54-16", 4423],
# ["URG-04LX/2011-09/", "2011-09-27-19-02-05", 2750],
# ["URG-04LX/2011-09/", "2011-09-27-19-06-40", 1476],
# ["URG-04LX/2011-09/", "2011-09-27-19-15-48", 852],
# ["URG-04LX/2011-09/", "2011-09-27-19-18-42", 3507],
# ["URG-04LX/2011-09/", "2011-09-27-19-24-31", 7523],
# ["URG-04LX/2011-09/", "2011-09-27-19-37-00", 811],
# ["URG-04LX/2011-09/", "2011-09-27-19-38-33", 2513],
# ["URG-04LX/2011-09/", "2011-09-27-19-42-44", 3714],
# ["URG-04LX/2011-09/", "2011-09-27-19-48-54", 11424],
# ["URG-04LX/2011-09/", "2011-09-27-21-56-41", 3724],
# ["URG-04LX/2011-09/", "2011-09-27-22-03-07", 2567],
# ["URG-04LX/2011-09/", "2011-09-27-22-09-12", 4644],
# ["URG-04LX/2011-09/", "2011-09-28-18-00-52", 2122],
# ["URG-04LX/2011-09/", "2011-09-28-18-05-07", 2359],
# ["URG-04LX/2011-09/", "2011-09-28-18-09-02", 1100],
# ["URG-04LX/2011-09/", "2011-09-28-18-10-52", 4976],
# ["URG-04LX/2011-09/", "2011-09-28-18-19-08", 1921],
# ["URG-04LX/2011-09/", "2011-09-28-18-22-19", 3118],
# ["URG-04LX/2011-09/", "2011-09-28-18-34-12", 10858],
# ["URG-04LX/2011-09/", "2011-09-28-18-52-14", 3465],
# ["URG-04LX/2011-09/", "2011-09-28-18-57-59", 1862],
# ["URG-04LX/2011-09/", "2011-09-28-19-07-35", 1786],
# ["URG-04LX/2011-09/", "2011-09-28-19-10-58", 1493],
# ["URG-04LX/2011-09/", "2011-09-28-19-14-58", 850],
# ["URG-04LX/2011-09/", "2011-09-28-19-16-58", 1502],
# ["URG-04LX/2011-09/", "2011-09-28-19-19-28", 2765],
# ["URG-04LX/2011-09/", "2011-09-28-19-24-04", 5320],
# ["URG-04LX/2011-09/", "2011-09-28-19-32-54", 6355],
# ["URG-04LX/2011-09/", "2011-09-28-19-43-27", 10790],
# ["URG-04LX/2011-09/", "2011-09-28-21-37-15", 1540],
# ["URG-04LX/2011-09/", "2011-09-28-21-41-14", 4500],
# ["URG-04LX/2011-09/", "2011-09-28-22-21-56", 788],
# ["URG-04LX/2011-09/", "2011-09-28-22-23-14", 4274],
# ["URG-04LX/2011-09/", "2011-09-29-05-00-03", 658],
# ["URG-04LX/2011-09/", "2011-09-29-05-01-09", 1414],
# ["URG-04LX/2011-09/", "2011-09-29-05-03-30", 724],
# ["URG-04LX/2011-09/", "2011-09-29-05-04-42", 1440],
# ["URG-04LX/2011-09/", "2011-09-29-05-40-29", 937],
# ["URG-04LX/2011-09/", "2011-09-29-05-42-02", 1439],
# ["URG-04LX/2011-09/", "2011-09-29-05-45-02", 808],
# ["URG-04LX/2011-09/", "2011-09-29-05-46-22", 2032],
# ["URG-04LX/2011-09/", "2011-09-29-05-49-45", 1117],
# ["URG-04LX/2011-09/", "2011-09-29-14-01-51", 11789],
# ["URG-04LX/2011-09/", "2011-09-29-14-25-21", 2455],
# ["URG-04LX/2011-09/", "2011-09-29-14-29-26", 5256],
# ["URG-04LX/2011-09/", "2011-09-29-14-38-09", 20127],
# ["URG-04LX/2011-09/", "2011-09-29-15-11-34", 4614],
# ["URG-04LX/2011-09/", "2011-09-29-15-19-14", 19099],
# ["URG-04LX/2011-09/", "2011-09-29-15-50-56", 5536],
# ["URG-04LX/2011-09/", "2011-09-29-17-44-36", 1394],
# ["URG-04LX/2011-09/", "2011-09-29-17-46-55", 1010],
# ["URG-04LX/2011-09/", "2011-09-29-17-48-36", 3449],
# ["URG-04LX/2011-09/", "2011-09-29-17-54-20", 820],
# ["URG-04LX/2011-09/", "2011-09-29-17-55-42", 1597],
# ["URG-04LX/2011-09/", "2011-09-29-18-53-23", 975],
# ["URG-04LX/2011-09/", "2011-09-29-18-57-47", 1367],
# ["URG-04LX/2011-09/", "2011-09-29-19-00-41", 3133],
# ["URG-04LX/2011-09/", "2011-09-29-19-06-11", 1667],
# ["URG-04LX/2011-09/", "2011-09-29-19-08-57", 1548],
# ["URG-04LX/2011-09/", "2011-09-29-19-16-36", 1523],
# ["URG-04LX/2011-09/", "2011-09-29-19-19-31", 1977],
# ["URG-04LX/2011-09/", "2011-09-30-04-52-13", 73127],
# ["URG-04LX/2011-09/", "2011-09-30-14-39-32", 4539],
# ["URG-04LX/2011-09/", "2011-09-30-14-47-04", 3022],
# ["URG-04LX/2011-09/", "2011-09-30-14-52-05", 3023],
# ["URG-04LX/2011-09/", "2011-09-30-16-59-39", 8096],
# ["URG-04LX/2011-09/", "2011-09-30-17-13-05", 2343],
# ["URG-04LX/2011-09/", "2011-09-30-17-18-32", 3584],
# ["URG-04LX/2011-09/", "2011-09-30-17-24-29", 9338],
# ["URG-04LX/2011-09/", "2011-09-30-17-39-59", 7146],
# ["URG-04LX/2011-09/", "2011-09-30-17-51-51", 1037],
# ["URG-04LX/2011-09/", "2011-09-30-17-57-46", 4588],
# ["URG-04LX/2011-09/", "2011-09-30-18-05-23", 5624],
# ["URG-04LX/2011-09/", "2011-09-30-18-14-43", 16069],
# ["URG-04LX/2011-09/", "2011-09-30-18-41-24", 2655],
# ["URG-04LX/2011-09/", "2011-09-30-18-45-49", 7328],
# ["URG-04LX/2011-09/", "2011-09-30-20-06-11", 16333],
# 
# # 2011-10
# ["URG-04LX/2011-10/", "2011-10-03-18-01-48", 855],
# ["URG-04LX/2011-10/", "2011-10-03-18-03-59", 1306],
# ["URG-04LX/2011-10/", "2011-10-03-18-06-39", 6778],
# ["URG-04LX/2011-10/", "2011-10-03-18-20-38", 7072],
# ["URG-04LX/2011-10/", "2011-10-03-18-34-21", 716],
# ["URG-04LX/2011-10/", "2011-10-03-18-36-14", 16142],
# ["URG-04LX/2011-10/", "2011-10-03-19-05-11", 18490],
# ["URG-04LX/2011-10/", "2011-10-03-21-14-26", 1037],
# ["URG-04LX/2011-10/", "2011-10-03-21-16-09", 648],
# ["URG-04LX/2011-10/", "2011-10-03-21-17-17", 794],
# ["URG-04LX/2011-10/", "2011-10-03-21-33-40", 1613],
# ["URG-04LX/2011-10/", "2011-10-03-21-36-21", 2347],
# ["URG-04LX/2011-10/", "2011-10-03-21-40-15", 11618],
# ["URG-04LX/2011-10/", "2011-10-04-04-31-18", 1734],
# ["URG-04LX/2011-10/", "2011-10-04-04-34-11", 812],
# ["URG-04LX/2011-10/", "2011-10-04-04-45-16", 677],
# ["URG-04LX/2011-10/", "2011-10-04-04-52-15", 10785],
# ["URG-04LX/2011-10/", "2011-10-04-05-36-27", 1044],
# ["URG-04LX/2011-10/", "2011-10-04-05-38-11", 781],
# ["URG-04LX/2011-10/", "2011-10-04-05-45-14", 979],
# ["URG-04LX/2011-10/", "2011-10-04-05-46-51", 2113],
# ["URG-04LX/2011-10/", "2011-10-04-14-18-26", 4398],
# ["URG-04LX/2011-10/", "2011-10-04-14-25-44", 2019],
# ["URG-04LX/2011-10/", "2011-10-04-14-30-00", 3999],
# ["URG-04LX/2011-10/", "2011-10-04-14-36-38", 2523],
# ["URG-04LX/2011-10/", "2011-10-04-14-40-50", 1047],
# ["URG-04LX/2011-10/", "2011-10-04-14-42-35", 1123],
# ["URG-04LX/2011-10/", "2011-10-04-14-44-27", 1492],
# ["URG-04LX/2011-10/", "2011-10-04-17-28-21", 5779],
# ["URG-04LX/2011-10/", "2011-10-04-17-47-38", 3582],
# ["URG-04LX/2011-10/", "2011-10-04-17-53-35", 4970],
# ["URG-04LX/2011-10/", "2011-10-04-18-01-50", 5114],
# ["URG-04LX/2011-10/", "2011-10-04-18-10-53", 3653],
# ["URG-04LX/2011-10/", "2011-10-04-18-39-59", 5490],
# ["URG-04LX/2011-10/", "2011-10-04-18-49-06", 2688],
# ["URG-04LX/2011-10/", "2011-10-04-19-28-16", 30732],
# ["URG-04LX/2011-10/", "2011-10-04-23-51-28", 2720],
# ["URG-04LX/2011-10/", "2011-10-04-23-55-59", 720],
# ["URG-04LX/2011-10/", "2011-10-04-23-57-11", 1367],
# ["URG-04LX/2011-10/", "2011-10-04-23-59-27", 1217],
# ["URG-04LX/2011-10/", "2011-10-05-00-01-28", 920],
# ["URG-04LX/2011-10/", "2011-10-05-18-48-41", 11548],
# ["URG-04LX/2011-10/", "2011-10-05-19-17-54", 1630],
# ["URG-04LX/2011-10/", "2011-10-05-19-20-37", 4175],
# ["URG-04LX/2011-10/", "2011-10-05-19-36-05", 6809],
# ["URG-04LX/2011-10/", "2011-10-05-19-47-23", 7673],
# ["URG-04LX/2011-10/", "2011-10-05-20-00-07", 6652],
# ["URG-04LX/2011-10/", "2011-10-05-20-11-10", 6938],
# ["URG-04LX/2011-10/", "2011-10-05-20-22-42", 5363],
# ["URG-04LX/2011-10/", "2011-10-05-20-31-36", 5406],
# ["URG-04LX/2011-10/", "2011-10-05-20-40-34", 5231],
# ["URG-04LX/2011-10/", "2011-10-05-22-40-41", 1634],
# ["URG-04LX/2011-10/", "2011-10-05-22-43-23", 1229],
# ["URG-04LX/2011-10/", "2011-10-05-22-47-54", 1468],
# ["URG-04LX/2011-10/", "2011-10-05-22-50-20", 1780],
# ["URG-04LX/2011-10/", "2011-10-05-22-53-17", 1100],
# ["URG-04LX/2011-10/", "2011-10-05-22-55-07", 1417],
# ["URG-04LX/2011-10/", "2011-10-06-13-40-49", 768],
# ["URG-04LX/2011-10/", "2011-10-06-13-42-06", 2210],
# ["URG-04LX/2011-10/", "2011-10-06-13-45-46", 1347],
# ["URG-04LX/2011-10/", "2011-10-06-13-48-10", 2087],
# ["URG-04LX/2011-10/", "2011-10-06-13-54-31", 1340],
# ["URG-04LX/2011-10/", "2011-10-06-13-56-45", 1204],
# ["URG-04LX/2011-10/", "2011-10-06-14-00-24", 21867],
# ["URG-04LX/2011-10/", "2011-10-06-15-23-58", 1237],
# ["URG-04LX/2011-10/", "2011-10-06-15-26-01", 1606],
# ["URG-04LX/2011-10/", "2011-10-06-15-28-44", 15483],
# ["URG-04LX/2011-10/", "2011-10-06-18-02-25", 2626],
# ["URG-04LX/2011-10/", "2011-10-06-18-06-47", 2003],
# ["URG-04LX/2011-10/", "2011-10-06-18-10-07", 7001],
# ["URG-04LX/2011-10/", "2011-10-06-18-21-45", 898],
# ["URG-04LX/2011-10/", "2011-10-06-18-25-50", 2518],
# ["URG-04LX/2011-10/", "2011-10-06-18-32-04", 2777],
# ["URG-04LX/2011-10/", "2011-10-06-18-36-41", 5972],
# ["URG-04LX/2011-10/", "2011-10-06-20-10-04", 3635],
# ["URG-04LX/2011-10/", "2011-10-06-20-16-06", 3448],
# ["URG-04LX/2011-10/", "2011-10-06-22-16-43", 4561],
# ["URG-04LX/2011-10/", "2011-10-06-22-24-17", 1461],
# ["URG-04LX/2011-10/", "2011-10-06-22-27-03", 558],
# ["URG-04LX/2011-10/", "2011-10-06-22-27-58", 727],
# ["URG-04LX/2011-10/", "2011-10-06-22-29-11", 8009],
# ["URG-04LX/2011-10/", "2011-10-07-02-56-20", 2921],
# ["URG-04LX/2011-10/", "2011-10-07-03-06-57", 11137],
# ["URG-04LX/2011-10/", "2011-10-07-03-25-27", 1282],
# ["URG-04LX/2011-10/", "2011-10-07-03-33-35", 2398],
# ["URG-04LX/2011-10/", "2011-10-07-04-32-07", 5658],
# ["URG-04LX/2011-10/", "2011-10-07-04-43-33", 2966],
# ["URG-04LX/2011-10/", "2011-10-07-04-53-30", 3621],
# ["URG-04LX/2011-10/", "2011-10-07-04-59-31", 6504],
# ["URG-04LX/2011-10/", "2011-10-07-05-10-18", 2395],
# ["URG-04LX/2011-10/", "2011-10-07-09-09-17", 1230],
# ["URG-04LX/2011-10/", "2011-10-07-09-11-19", 1711],
# ["URG-04LX/2011-10/", "2011-10-07-09-43-52", 980],
# ["URG-04LX/2011-10/", "2011-10-07-09-46-45", 661],
# ["URG-04LX/2011-10/", "2011-10-07-09-47-51", 1397],
# ["URG-04LX/2011-10/", "2011-10-07-09-50-24", 818],
# ["URG-04LX/2011-10/", "2011-10-07-09-55-19", 1531],
# ["URG-04LX/2011-10/", "2011-10-07-09-57-51", 2150],
# ["URG-04LX/2011-10/", "2011-10-07-10-04-04", 5762],
# ["URG-04LX/2011-10/", "2011-10-07-10-55-01", 1053],
# ["URG-04LX/2011-10/", "2011-10-07-10-56-46", 609],
# ["URG-04LX/2011-10/", "2011-10-07-10-57-47", 997],
# ["URG-04LX/2011-10/", "2011-10-07-10-59-36", 944],
# ["URG-04LX/2011-10/", "2011-10-07-11-01-15", 5751],
# ["URG-04LX/2011-10/", "2011-10-07-11-13-46", 1314],
# ["URG-04LX/2011-10/", "2011-10-07-11-15-57", 10349],
# ["URG-04LX/2011-10/", "2011-10-07-11-33-08", 1004],
# ["URG-04LX/2011-10/", "2011-10-07-13-37-19", 2061],
# ["URG-04LX/2011-10/", "2011-10-07-13-40-44", 1267],
# ["URG-04LX/2011-10/", "2011-10-07-13-42-58", 603],
# ["URG-04LX/2011-10/", "2011-10-07-13-44-45", 644],
# ["URG-04LX/2011-10/", "2011-10-07-13-46-51", 1766],
# ["URG-04LX/2011-10/", "2011-10-07-13-49-52", 786],
# ["URG-04LX/2011-10/", "2011-10-07-13-52-41", 917],
# ["URG-04LX/2011-10/", "2011-10-07-13-56-49", 982],
# ["URG-04LX/2011-10/", "2011-10-07-13-58-26", 1061],
# ["URG-04LX/2011-10/", "2011-10-07-14-00-12", 3759],
# ["URG-04LX/2011-10/", "2011-10-07-14-06-27", 2489],
# ["URG-04LX/2011-10/", "2011-10-07-20-16-46", 1940],
# ["URG-04LX/2011-10/", "2011-10-07-20-20-00", 1095],
# ["URG-04LX/2011-10/", "2011-10-07-20-21-49", 2388],
# ["URG-04LX/2011-10/", "2011-10-07-20-29-29", 982],
# ["URG-04LX/2011-10/", "2011-10-07-20-31-07", 625],
# ["URG-04LX/2011-10/", "2011-10-07-20-32-10", 4167],
# ["URG-04LX/2011-10/", "2011-10-07-20-39-05", 1526],
# ["URG-04LX/2011-10/", "2011-10-07-20-41-37", 683],
# ["URG-04LX/2011-10/", "2011-10-07-20-42-45", 1468],
# ["URG-04LX/2011-10/", "2011-10-07-20-45-12", 12606],
# ["URG-04LX/2011-10/", "2011-10-07-22-32-17", 3928],
# ["URG-04LX/2011-10/", "2011-10-07-22-38-48", 906],
# ["URG-04LX/2011-10/", "2011-10-07-22-40-18", 2061],
# ["URG-04LX/2011-10/", "2011-10-07-22-44-59", 983],
# ["URG-04LX/2011-10/", "2011-10-07-22-46-45", 12212],
# ["URG-04LX/2011-10/", "2011-10-09-00-44-24", 6466],
# ["URG-04LX/2011-10/", "2011-10-09-02-23-50", 22987],
# ["URG-04LX/2011-10/", "2011-10-09-03-12-32", 8978],
# ["URG-04LX/2011-10/", "2011-10-10-18-12-02", 1043],
# ["URG-04LX/2011-10/", "2011-10-10-18-13-46", 1660],
# ["URG-04LX/2011-10/", "2011-10-10-18-16-31", 3247],
# ["URG-04LX/2011-10/", "2011-10-10-18-21-55", 1212],
# ["URG-04LX/2011-10/", "2011-10-10-18-23-56", 4097],
# ["URG-04LX/2011-10/", "2011-10-10-18-30-44", 2590],
# ["URG-04LX/2011-10/", "2011-10-10-18-35-02", 5060],
# ["URG-04LX/2011-10/", "2011-10-10-18-44-30", 633],
# ["URG-04LX/2011-10/", "2011-10-10-18-45-33", 2403],
# ["URG-04LX/2011-10/", "2011-10-10-18-49-33", 2433],
# ["URG-04LX/2011-10/", "2011-10-10-18-54-41", 18916],
# ["URG-04LX/2011-10/", "2011-10-10-19-35-27", 12417],
# ["URG-04LX/2011-10/", "2011-10-10-20-26-01", 4599],
# ["URG-04LX/2011-10/", "2011-10-10-20-35-43", 2245],
# ["URG-04LX/2011-10/", "2011-10-10-20-39-27", 5548],
# ["URG-04LX/2011-10/", "2011-10-11-04-07-57", 574],
# ["URG-04LX/2011-10/", "2011-10-11-04-08-54", 1035],
# ["URG-04LX/2011-10/", "2011-10-11-04-10-37", 946],
# ["URG-04LX/2011-10/", "2011-10-11-04-16-19", 664],
# ["URG-04LX/2011-10/", "2011-10-11-04-17-26", 1711],
# ["URG-04LX/2011-10/", "2011-10-11-05-05-45", 7701],
# ["URG-04LX/2011-10/", "2011-10-11-05-28-04", 1246],
# ["URG-04LX/2011-10/", "2011-10-11-05-30-08", 1128],
# ["URG-04LX/2011-10/", "2011-10-11-05-32-19", 1404],
# ["URG-04LX/2011-10/", "2011-10-11-05-35-53", 1314],
# ["URG-04LX/2011-10/", "2011-10-11-17-40-53", 6670],
# ["URG-04LX/2011-10/", "2011-10-11-18-11-00", 5026],
# ["URG-04LX/2011-10/", "2011-10-12-16-05-01", 1556],
# ["URG-04LX/2011-10/", "2011-10-12-16-07-36", 1855],
# ["URG-04LX/2011-10/", "2011-10-13-14-55-01", 30375],
# ["URG-04LX/2011-10/", "2011-10-18-16-36-17", 7158],
# ["URG-04LX/2011-10/", "2011-10-18-17-17-33", 2347],
# ["URG-04LX/2011-10/", "2011-10-18-17-38-31", 9644],
# ["URG-04LX/2011-10/", "2011-10-19-20-09-08", 537],
# ["URG-04LX/2011-10/", "2011-10-19-20-10-02", 4608],
# ["URG-04LX/2011-10/", "2011-10-19-20-17-41", 2222],
# ["URG-04LX/2011-10/", "2011-10-20-16-58-17", 6943],
# ["URG-04LX/2011-10/", "2011-10-26-15-04-22", 52075],
# ["URG-04LX/2011-10/", "2011-10-26-16-37-28", 1066],
# ["URG-04LX/2011-10/", "2011-10-26-16-39-14", 1150],
# ["URG-04LX/2011-10/", "2011-10-26-19-33-04", 2904],
# ["URG-04LX/2011-10/", "2011-10-26-19-48-54", 4034],
# ["URG-04LX/2011-10/", "2011-10-26-19-57-59", 1597],
# ["URG-04LX/2011-10/", "2011-10-26-20-00-38", 6295],
# ["URG-04LX/2011-10/", "2011-10-27-19-17-43", 1173],
# ["URG-04LX/2011-10/", "2011-10-27-19-19-42", 1588],
# ["URG-04LX/2011-10/", "2011-10-27-19-22-22", 5602],
# ["URG-04LX/2011-10/", "2011-10-27-19-32-28", 963],
# ["URG-04LX/2011-10/", "2011-10-27-19-34-04", 1387],
# ["URG-04LX/2011-10/", "2011-10-27-19-36-25", 11626],
# ["URG-04LX/2011-10/", "2011-10-27-19-56-22", 798],
# ["URG-04LX/2011-10/", "2011-10-27-19-57-44", 3178],
# ["URG-04LX/2011-10/", "2011-10-27-20-03-01", 1561],
# ["URG-04LX/2011-10/", "2011-10-27-20-40-08", 2998],
# ["URG-04LX/2011-10/", "2011-10-27-20-45-08", 1726],
# ["URG-04LX/2011-10/", "2011-10-27-20-48-27", 1196],
# ["URG-04LX/2011-10/", "2011-10-27-20-50-32", 3754],
# ["URG-04LX/2011-10/", "2011-10-27-20-56-49", 683],
# ["URG-04LX/2011-10/", "2011-10-28-14-31-56", 1079],
# ["URG-04LX/2011-10/", "2011-10-28-14-33-44", 3728],
# ["URG-04LX/2011-10/", "2011-10-28-14-40-40", 1113],
# ["URG-04LX/2011-10/", "2011-10-28-14-43-08", 7206],
# ["URG-04LX/2011-10/", "2011-10-28-14-55-06", 1501],
# ["URG-04LX/2011-10/", "2011-10-28-14-57-39", 6489],
# ["URG-04LX/2011-10/", "2011-10-28-15-08-36", 1680],
# ["URG-04LX/2011-10/", "2011-10-28-15-11-24", 1285],
# ["URG-04LX/2011-10/", "2011-10-28-18-16-07", 1776],
# ["URG-04LX/2011-10/", "2011-10-28-19-16-55", 790],
# ["URG-04LX/2011-10/", "2011-10-28-19-18-19", 12385],
# ["URG-04LX/2011-10/", "2011-10-28-19-38-52", 1918],
# ["URG-04LX/2011-10/", "2011-10-28-19-42-03", 42864],
# ["URG-04LX/2011-10/", "2011-10-28-23-23-14", 3841],
# ["URG-04LX/2011-10/", "2011-10-31-15-55-40", 6082],
# ["URG-04LX/2011-10/", "2011-10-31-17-09-30", 43810],
# ["URG-04LX/2011-10/", "2011-10-31-19-25-11", 31419],
# ["URG-04LX/2011-10/", "2011-10-31-20-17-23", 1937],
# ["URG-04LX/2011-10/", "2011-10-31-20-23-41", 4224],
# ["URG-04LX/2011-10/", "2011-10-31-20-39-34", 7527],
# 
# # 2011-11
# ["URG-04LX/2011-11/", "2011-11-01-02-02-53", 1708],
# ["URG-04LX/2011-11/", "2011-11-01-02-08-55", 1387],
# ["URG-04LX/2011-11/", "2011-11-01-02-44-15", 2098],
# ["URG-04LX/2011-11/", "2011-11-01-02-49-29", 1738],
# ["URG-04LX/2011-11/", "2011-11-01-02-54-18", 1998],
# ["URG-04LX/2011-11/", "2011-11-01-02-57-58", 1809],
# ["URG-04LX/2011-11/", "2011-11-01-05-07-45", 61450],
# ["URG-04LX/2011-11/", "2011-11-01-17-44-30", 1451],
# ["URG-04LX/2011-11/", "2011-11-01-17-46-55", 9279],
# ["URG-04LX/2011-11/", "2011-11-01-18-17-40", 10196],
# ["URG-04LX/2011-11/", "2011-11-01-18-36-17", 1692],
# ["URG-04LX/2011-11/", "2011-11-01-18-39-30", 2248],
# ["URG-04LX/2011-11/", "2011-11-01-18-47-13", 2199],
# ["URG-04LX/2011-11/", "2011-11-01-18-50-53", 15888],
# ["URG-04LX/2011-11/", "2011-11-01-19-28-22", 896],
# ["URG-04LX/2011-11/", "2011-11-01-19-30-32", 11728],
# ["URG-04LX/2011-11/", "2011-11-03-19-04-27", 11450],
# ["URG-04LX/2011-11/", "2011-11-03-20-28-58", 8552],
# ["URG-04LX/2011-11/", "2011-11-04-13-00-26", 27827],
# ["URG-04LX/2011-11/", "2011-11-04-15-08-21", 1095],
# ["URG-04LX/2011-11/", "2011-11-04-15-54-21", 33447],
# ["URG-04LX/2011-11/", "2011-11-04-17-01-44", 2762],
# ["URG-04LX/2011-11/", "2011-11-04-19-48-03", 2653],
# ["URG-04LX/2011-11/", "2011-11-04-19-52-48", 649],
# ["URG-04LX/2011-11/", "2011-11-04-19-55-15", 29911],
# ["URG-04LX/2011-11/", "2011-11-04-20-47-08", 23208],
# ["URG-04LX/2011-11/", "2011-11-04-21-26-48", 12241],
# ["URG-04LX/2011-11/", "2011-11-07-16-30-13", 13728],
# ["URG-04LX/2011-11/", "2011-11-07-17-19-23", 6794],
# ["URG-04LX/2011-11/", "2011-11-08-19-48-49", 4550],
# ["URG-04LX/2011-11/", "2011-11-14-17-01-47", 2769],
# ["URG-04LX/2011-11/", "2011-11-14-18-16-47", 35398],
# ["URG-04LX/2011-11/", "2011-11-16-15-50-21", 2644],
# ["URG-04LX/2011-11/", "2011-11-16-16-04-45", 6597],
# ["URG-04LX/2011-11/", "2011-11-16-16-19-07", 6138],
# ["URG-04LX/2011-11/", "2011-11-17-16-58-43", 3464],
# ["URG-04LX/2011-11/", "2011-11-17-17-50-32", 2294],
# ["URG-04LX/2011-11/", "2011-11-18-21-51-17", 4061],
# ["URG-04LX/2011-11/", "2011-11-18-22-37-21", 3705],
# ["URG-04LX/2011-11/", "2011-11-21-16-56-21", 1540],
# ["URG-04LX/2011-11/", "2011-11-21-16-57-00", 1031],
# ["URG-04LX/2011-11/", "2011-11-21-16-58-48", 39763],
# ["URG-04LX/2011-11/", "2011-11-21-19-39-47", 6181],
# ["URG-04LX/2011-11/", "2011-11-21-19-50-16", 825],
# ["URG-04LX/2011-11/", "2011-11-21-19-52-19", 1354],
# ["URG-04LX/2011-11/", "2011-11-30-16-36-36", 1351],
# ["URG-04LX/2011-11/", "2011-11-30-16-40-23", 15387],
# 
# # 2011-12
# ["URG-04LX/2011-12/", "2011-12-01-19-56-38", 9940],
# ["URG-04LX/2011-12/", "2011-12-01-21-43-23", 59801],
# ["URG-04LX/2011-12/", "2011-12-01-23-36-16", 1364],
# ["URG-04LX/2011-12/", "2011-12-01-23-53-17", 3602],
# ["URG-04LX/2011-12/", "2011-12-01-23-59-39", 5155],
# ["URG-04LX/2011-12/", "2011-12-02-00-11-24", 4708],
# ["URG-04LX/2011-12/", "2011-12-02-00-20-30", 1881],
# ["URG-04LX/2011-12/", "2011-12-02-00-25-21", 20932],
# ["URG-04LX/2011-12/", "2011-12-08-15-21-03", 759],
# ["URG-04LX/2011-12/", "2011-12-08-15-22-19", 1886],
# ["URG-04LX/2011-12/", "2011-12-09-17-29-32", 13483],
# ["URG-04LX/2011-12/", "2011-12-13-17-23-33", 2195],
# ["URG-04LX/2011-12/", "2011-12-13-17-28-37", 14217],
# ["URG-04LX/2011-12/", "2011-12-13-17-54-22", 20482],
# ["URG-04LX/2011-12/", "2011-12-14-19-33-02", 2430],
# ["URG-04LX/2011-12/", "2011-12-14-19-41-28", 791],
# ["URG-04LX/2011-12/", "2011-12-14-19-56-43", 5436],
# ["URG-04LX/2011-12/", "2011-12-15-17-08-20", 9547],
# ["URG-04LX/2011-12/", "2011-12-15-20-04-42", 1337],
# ["URG-04LX/2011-12/", "2011-12-15-20-06-57", 1247],
# ["URG-04LX/2011-12/", "2011-12-15-20-09-23", 1091],
# ["URG-04LX/2011-12/", "2011-12-15-20-14-20", 1982],
# ["URG-04LX/2011-12/", "2011-12-15-20-17-39", 11006],
# ["URG-04LX/2011-12/", "2011-12-15-20-37-28", 746],
# ["URG-04LX/2011-12/", "2011-12-16-19-25-28", 3764],
# ["URG-04LX/2011-12/", "2011-12-16-19-33-12", 2398],
# ["URG-04LX/2011-12/", "2011-12-16-19-38-35", 2221],
# 
# # 2012-01
# ["URG-04LX/2012-01/", "2012-01-16-19-05-21", 1533],
# ["URG-04LX/2012-01/", "2012-01-16-19-07-54", 1356],
# ["URG-04LX/2012-01/", "2012-01-16-20-55-30", 25597],
# ["URG-04LX/2012-01/", "2012-01-16-22-45-02", 16538],
# ["URG-04LX/2012-01/", "2012-01-16-23-15-42", 2897],
# ["URG-04LX/2012-01/", "2012-01-16-23-42-47", 4071],
# ["URG-04LX/2012-01/", "2012-01-16-23-56-15", 7248],
# ["URG-04LX/2012-01/", "2012-01-17-00-08-17", 2348],
# ["URG-04LX/2012-01/", "2012-01-17-00-12-23", 4276],
# ["URG-04LX/2012-01/", "2012-01-17-00-20-41", 5312],
# ["URG-04LX/2012-01/", "2012-01-20-16-04-56", 24556],
# ["URG-04LX/2012-01/", "2012-01-20-19-11-29", 2435],
# ["URG-04LX/2012-01/", "2012-01-20-19-15-33", 725],
# ["URG-04LX/2012-01/", "2012-01-20-19-16-47", 12483],
# ["URG-04LX/2012-01/", "2012-01-24-15-58-04", 1161],
# ["URG-04LX/2012-01/", "2012-01-24-16-00-00", 8267],
# ["URG-04LX/2012-01/", "2012-01-24-16-13-43", 4709],
# ["URG-04LX/2012-01/", "2012-01-24-16-27-24", 3198],
# ["URG-04LX/2012-01/", "2012-01-24-16-35-20", 4728],
# ["URG-04LX/2012-01/", "2012-01-24-17-04-21", 8887],
# ["URG-04LX/2012-01/", "2012-01-24-17-19-38", 2620],
# ["URG-04LX/2012-01/", "2012-01-24-17-30-46", 4759],
# ["URG-04LX/2012-01/", "2012-01-24-18-54-18", 3805],
# ["URG-04LX/2012-01/", "2012-01-24-19-08-34", 3992],
# ["URG-04LX/2012-01/", "2012-01-24-19-33-37", 4479],
# ["URG-04LX/2012-01/", "2012-01-24-20-17-07", 930],
# ["URG-04LX/2012-01/", "2012-01-24-20-18-40", 2092],
# ["URG-04LX/2012-01/", "2012-01-24-20-22-49", 7481],
# ["URG-04LX/2012-01/", "2012-01-30-22-30-00", 4708],
# ["URG-04LX/2012-01/", "2012-01-30-22-37-50", 13042],
# ["URG-04LX/2012-01/", "2012-01-30-23-00-03", 5250],
# ["URG-04LX/2012-01/", "2012-01-30-23-09-21", 19524],
# ["URG-04LX/2012-01/", "2012-01-31-21-10-09", 12717],
# ["URG-04LX/2012-01/", "2012-01-31-21-31-39", 896],
# 
# # 2012-02
# ["URG-04LX/2012-02/", "2012-02-01-22-11-23", 9583],
# ["URG-04LX/2012-02/", "2012-02-01-22-56-36", 16406],
# ["URG-04LX/2012-02/", "2012-02-02-19-35-11", 5656],
# ["URG-04LX/2012-02/", "2012-02-03-15-18-18", 12345],
# ["URG-04LX/2012-02/", "2012-02-03-19-26-26", 2296],
# ["URG-04LX/2012-02/", "2012-02-03-19-32-37", 11046],
# ["URG-04LX/2012-02/", "2012-02-08-18-59-27", 1791],
# ["URG-04LX/2012-02/", "2012-02-08-19-52-54", 12273],
# ["URG-04LX/2012-02/", "2012-02-08-20-13-52", 1401],
# ["URG-04LX/2012-02/", "2012-02-08-20-18-05", 8730],
# ["URG-04LX/2012-02/", "2012-02-09-16-23-06", 1397],
# ["URG-04LX/2012-02/", "2012-02-09-19-57-29", 2214],
# ["URG-04LX/2012-02/", "2012-02-09-20-01-10", 491],
# ["URG-04LX/2012-02/", "2012-02-13-14-27-59", 1473],
# ["URG-04LX/2012-02/", "2012-02-13-14-42-44", 3305],
# ["URG-04LX/2012-02/", "2012-02-13-15-43-55", 1373],
# ["URG-04LX/2012-02/", "2012-02-13-15-47-12", 2252],
# ["URG-04LX/2012-02/", "2012-02-13-17-49-57", 3697],
# ["URG-04LX/2012-02/", "2012-02-13-18-02-25", 19961],
# ["URG-04LX/2012-02/", "2012-02-13-19-48-15", 2138],
# ["URG-04LX/2012-02/", "2012-02-13-19-51-54", 10080],
# ["URG-04LX/2012-02/", "2012-02-13-20-09-10", 1593],
# ["URG-04LX/2012-02/", "2012-02-13-20-12-00", 3886],
# ["URG-04LX/2012-02/", "2012-02-13-20-18-33", 4089],
# ["URG-04LX/2012-02/", "2012-02-16-15-40-47", 6382],
# ["URG-04LX/2012-02/", "2012-02-16-16-51-53", 4427],
# ["URG-04LX/2012-02/", "2012-02-16-17-12-14", 861],
# ["URG-04LX/2012-02/", "2012-02-16-17-16-41", 15263],
# ["URG-04LX/2012-02/", "2012-02-16-20-58-50", 22745],
# ["URG-04LX/2012-02/", "2012-02-17-15-57-20", 31653],
# ["URG-04LX/2012-02/", "2012-02-17-21-23-56", 4176],
# ["URG-04LX/2012-02/", "2012-02-20-20-00-31", 5542],
# ["URG-04LX/2012-02/", "2012-02-22-14-51-28", 2395],
# ["URG-04LX/2012-02/", "2012-02-22-15-03-31", 1528],
# ["URG-04LX/2012-02/", "2012-02-22-17-41-29", 6735],
# ["URG-04LX/2012-02/", "2012-02-22-17-52-42", 1133],
# ["URG-04LX/2012-02/", "2012-02-22-20-26-00", 2569],
# ["URG-04LX/2012-02/", "2012-02-22-21-14-35", 2830],
# ["URG-04LX/2012-02/", "2012-02-22-21-23-00", 1020],
# ["URG-04LX/2012-02/", "2012-02-23-18-32-29", 731],
# ["URG-04LX/2012-02/", "2012-02-23-18-34-53", 8002],
# ["URG-04LX/2012-02/", "2012-02-24-15-54-14", 5158],
# ["URG-04LX/2012-02/", "2012-02-24-16-09-12", 4444],
# ["URG-04LX/2012-02/", "2012-02-24-18-39-37", 4404],
# ["URG-04LX/2012-02/", "2012-02-24-19-03-50", 13159],
# ["URG-04LX/2012-02/", "2012-02-24-22-34-37", 13735],
# ["URG-04LX/2012-02/", "2012-02-24-23-06-42", 9410],
# ["URG-04LX/2012-02/", "2012-02-24-23-22-40", 2045],
# ["URG-04LX/2012-02/", "2012-02-27-18-42-45", 9418],
# ["URG-04LX/2012-02/", "2012-02-27-18-59-55", 4441],
# ["URG-04LX/2012-02/", "2012-02-27-20-09-02", 4542],
# ["URG-04LX/2012-02/", "2012-02-27-20-16-35", 14251],
# ["URG-04LX/2012-02/", "2012-02-27-20-40-15", 3691],
# ["URG-04LX/2012-02/", "2012-02-27-20-47-51", 2809],
# ["URG-04LX/2012-02/", "2012-02-27-20-52-30", 2996],
# ["URG-04LX/2012-02/", "2012-02-27-20-58-30", 3299],
# ["URG-04LX/2012-02/", "2012-02-27-21-03-59", 6790],
# ["URG-04LX/2012-02/", "2012-02-27-23-27-01", 4858],
# ["URG-04LX/2012-02/", "2012-02-27-23-40-31", 2464],
# ["URG-04LX/2012-02/", "2012-02-28-15-38-19", 19478],
# ["URG-04LX/2012-02/", "2012-02-28-16-10-48", 1448],
# ["URG-04LX/2012-02/", "2012-02-28-16-19-19", 12796],
# ["URG-04LX/2012-02/", "2012-02-28-16-40-33", 1113],
# ["URG-04LX/2012-02/", "2012-02-28-18-25-04", 1461],
# ["URG-04LX/2012-02/", "2012-02-28-18-27-49", 2399],
# ["URG-04LX/2012-02/", "2012-02-28-18-34-34", 1439],
# ["URG-04LX/2012-02/", "2012-02-28-18-37-04", 1271],
# ["URG-04LX/2012-02/", "2012-02-28-18-39-18", 5532],
# ["URG-04LX/2012-02/", "2012-02-28-18-52-07", 3823],
# ["URG-04LX/2012-02/", "2012-02-28-20-41-13", 2556],
# ["URG-04LX/2012-02/", "2012-02-28-20-45-30", 7328],
# ["URG-04LX/2012-02/", "2012-02-28-21-01-43", 3968],
# ["URG-04LX/2012-02/", "2012-02-28-21-08-47", 538],
# ["URG-04LX/2012-02/", "2012-02-29-15-36-31", 18422],
# ["URG-04LX/2012-02/", "2012-02-29-16-07-28", 2555],
# ["URG-04LX/2012-02/", "2012-02-29-16-13-17", 9862],
# 
# # 2012-03
# ["URG-04LX/2012-03/", "2012-03-01-19-55-52", 18098],
# ["URG-04LX/2012-03/", "2012-03-01-20-25-55", 824],
# ["URG-04LX/2012-03/", "2012-03-01-20-27-22", 16441],
# ["URG-04LX/2012-03/", "2012-03-02-15-32-16", 13514],
# ["URG-04LX/2012-03/", "2012-03-02-15-55-49", 4249],
# ["URG-04LX/2012-03/", "2012-03-02-16-03-25", 7054],
# ["URG-04LX/2012-03/", "2012-03-02-18-29-26", 1362],
# ["URG-04LX/2012-03/", "2012-03-02-18-31-42", 1018],
# ["URG-04LX/2012-03/", "2012-03-02-18-33-24", 2673],
# ["URG-04LX/2012-03/", "2012-03-02-22-41-48", 4650],
# ["URG-04LX/2012-03/", "2012-03-04-14-24-20", 6402],
# ["URG-04LX/2012-03/", "2012-03-04-14-35-02", 4629],
# ["URG-04LX/2012-03/", "2012-03-04-14-43-25", 1011],
# ["URG-04LX/2012-03/", "2012-03-04-14-45-30", 17657],
# ["URG-04LX/2012-03/", "2012-03-04-15-14-49", 2172],
# ["URG-04LX/2012-03/", "2012-03-04-15-19-03", 663],
# ["URG-04LX/2012-03/", "2012-03-04-20-33-26", 7743],
# ["URG-04LX/2012-03/", "2012-03-04-20-47-52", 1415],
# ["URG-04LX/2012-03/", "2012-03-04-20-50-47", 8764],
# ["URG-04LX/2012-03/", "2012-03-05-15-59-15", 1216],
# ["URG-04LX/2012-03/", "2012-03-05-16-01-32", 1115],
# ["URG-04LX/2012-03/", "2012-03-05-16-17-14", 976],
# ["URG-04LX/2012-03/", "2012-03-05-16-19-06", 1259],
# ["URG-04LX/2012-03/", "2012-03-05-16-22-34", 6082],
# ["URG-04LX/2012-03/", "2012-03-05-16-50-34", 4539],
# ["URG-04LX/2012-03/", "2012-03-05-16-58-08", 674],
# ["URG-04LX/2012-03/", "2012-03-05-20-33-50", 4257],
# ["URG-04LX/2012-03/", "2012-03-05-20-40-56", 1033],
# ["URG-04LX/2012-03/", "2012-03-05-20-42-41", 3200],
# ["URG-04LX/2012-03/", "2012-03-06-16-17-18", 3443],
# ["URG-04LX/2012-03/", "2012-03-06-16-23-30", 1194],
# ["URG-04LX/2012-03/", "2012-03-06-16-25-36", 1205],
# ["URG-04LX/2012-03/", "2012-03-06-16-28-14", 7239],
# ["URG-04LX/2012-03/", "2012-03-06-18-58-36", 2864],
# ["URG-04LX/2012-03/", "2012-03-07-14-07-20", 3381],
# ["URG-04LX/2012-03/", "2012-03-07-14-12-59", 860],
# ["URG-04LX/2012-03/", "2012-03-07-14-14-27", 6551],
# ["URG-04LX/2012-03/", "2012-03-08-16-27-19", 16707],
# ["URG-04LX/2012-03/", "2012-03-08-21-16-00", 29376],
# ["URG-04LX/2012-03/", "2012-03-09-17-58-42", 18769],
# ["URG-04LX/2012-03/", "2012-03-09-18-29-52", 5245],
# ["URG-04LX/2012-03/", "2012-03-09-18-38-50", 1358],
# ["URG-04LX/2012-03/", "2012-03-09-18-41-06", 1951],
# ["URG-04LX/2012-03/", "2012-03-09-20-10-39", 3342],
# ["URG-04LX/2012-03/", "2012-03-15-15-25-55", 20063],
# ["URG-04LX/2012-03/", "2012-03-19-19-37-30", 1131],
# ["URG-04LX/2012-03/", "2012-03-20-13-32-56", 41288],
# ["URG-04LX/2012-03/", "2012-03-20-14-59-33", 1634],
# ["URG-04LX/2012-03/", "2012-03-20-15-02-17", 777],
# ["URG-04LX/2012-03/", "2012-03-20-15-03-37", 616],
# ["URG-04LX/2012-03/", "2012-03-20-15-56-41", 1748],
# ["URG-04LX/2012-03/", "2012-03-20-16-00-35", 5380],
# ["URG-04LX/2012-03/", "2012-03-20-16-10-24", 699],
# ["URG-04LX/2012-03/", "2012-03-20-16-14-53", 650],
# ["URG-04LX/2012-03/", "2012-03-20-21-14-46", 13257],
# ["URG-04LX/2012-03/", "2012-03-21-14-06-15", 10878],
# ["URG-04LX/2012-03/", "2012-03-21-14-24-21", 15779],
# ["URG-04LX/2012-03/", "2012-03-21-14-50-34", 2172],
# ["URG-04LX/2012-03/", "2012-03-21-18-07-33", 8464],
# ["URG-04LX/2012-03/", "2012-03-21-19-43-37", 2769],
# ["URG-04LX/2012-03/", "2012-03-21-19-48-14", 6581],
# ["URG-04LX/2012-03/", "2012-03-22-19-26-46", 1137],
# ["URG-04LX/2012-03/", "2012-03-22-19-29-02", 21210],
# ["URG-04LX/2012-03/", "2012-03-23-14-26-10", 7054],
# ["URG-04LX/2012-03/", "2012-03-23-14-37-55", 3722],
# ["URG-04LX/2012-03/", "2012-03-23-14-44-08", 2510],
# ["URG-04LX/2012-03/", "2012-03-24-22-08-12", 2077],
# ["URG-04LX/2012-03/", "2012-03-24-22-11-41", 1518],
# ["URG-04LX/2012-03/", "2012-03-24-22-19-59", 1124],
# ["URG-04LX/2012-03/", "2012-03-26-14-23-40", 5980],
# ["URG-04LX/2012-03/", "2012-03-26-14-37-05", 1071],
# ["URG-04LX/2012-03/", "2012-03-26-14-38-54", 1033],
# ["URG-04LX/2012-03/", "2012-03-26-14-40-39", 1027],
# ["URG-04LX/2012-03/", "2012-03-27-14-17-36", 3584],
# ["URG-04LX/2012-03/", "2012-03-27-14-27-39", 8349],
# ["URG-04LX/2012-03/", "2012-03-29-18-40-58", 722],
# ["URG-04LX/2012-03/", "2012-03-29-18-43-10", 6740],
# ["URG-04LX/2012-03/", "2012-03-29-19-01-17", 607],
# ["URG-04LX/2012-03/", "2012-03-29-19-02-55", 8789],
# ["URG-04LX/2012-03/", "2012-03-30-14-56-00", 3067],
# ["URG-04LX/2012-03/", "2012-03-30-15-02-43", 2239],
# ["URG-04LX/2012-03/", "2012-03-30-15-07-32", 2472],
# ["URG-04LX/2012-03/", "2012-03-30-15-11-39", 2988],
# ["URG-04LX/2012-03/", "2012-03-30-16-00-00", 1462],
# ["URG-04LX/2012-03/", "2012-03-30-16-02-39", 1053],
# ["URG-04LX/2012-03/", "2012-03-30-16-13-09", 4091],
# ["URG-04LX/2012-03/", "2012-03-30-16-20-41", 11419],
# ["URG-04LX/2012-03/", "2012-03-30-17-59-54", 888],
# ["URG-04LX/2012-03/", "2012-03-30-18-01-25", 5254],
# ["URG-04LX/2012-03/", "2012-03-30-18-10-10", 33546],
# ["URG-04LX/2012-03/", "2012-03-30-19-06-35", 2068],
# ["URG-04LX/2012-03/", "2012-03-30-19-10-03", 2528],
# ["URG-04LX/2012-03/", "2012-03-30-19-14-18", 937],
# 
# # 2012-04
# ["URG-04LX/2012-04/", "2012-04-03-20-00-06", 3939],
# ["URG-04LX/2012-04/", "2012-04-03-22-06-59", 1961],
# ["URG-04LX/2012-04/", "2012-04-03-22-10-51", 5150],
# ["URG-04LX/2012-04/", "2012-04-03-22-19-26", 6853],
# ["URG-04LX/2012-04/", "2012-04-03-22-30-56", 7005],
# ["URG-04LX/2012-04/", "2012-04-04-15-02-34", 21507],
# ["URG-04LX/2012-04/", "2012-04-04-15-38-24", 9956],
# ["URG-04LX/2012-04/", "2012-04-06-17-52-52", 3241],
# ["URG-04LX/2012-04/", "2012-04-06-17-59-11", 3316],
# ["URG-04LX/2012-04/", "2012-04-06-18-57-04", 906],
# ["URG-04LX/2012-04/", "2012-04-06-18-58-36", 44476],
# ["URG-04LX/2012-04/", "2012-04-07-15-09-39", 14252],
# ["URG-04LX/2012-04/", "2012-04-07-15-39-14", 15824],
# ["URG-04LX/2012-04/", "2012-04-09-18-57-05", 15122],
# ["URG-04LX/2012-04/", "2012-04-09-19-23-00", 10073],
# ["URG-04LX/2012-04/", "2012-04-09-19-39-45", 823],
# ["URG-04LX/2012-04/", "2012-04-09-19-41-09", 10607],
# ["URG-04LX/2012-04/", "2012-04-09-20-45-39", 1694],
# ["URG-04LX/2012-04/", "2012-04-09-20-48-29", 3640],
# ["URG-04LX/2012-04/", "2012-04-09-20-54-44", 3581],
# ["URG-04LX/2012-04/", "2012-04-10-20-29-04", 1747],
# ["URG-04LX/2012-04/", "2012-04-11-15-08-15", 700],
# ["URG-04LX/2012-04/", "2012-04-12-15-39-40", 1383],
# ["URG-04LX/2012-04/", "2012-04-12-19-28-58", 26308],
# ["URG-04LX/2012-04/", "2012-04-13-12-52-21", 67807],
# ["URG-04LX/2012-04/", "2012-04-16-20-14-22", 7508],
# ["URG-04LX/2012-04/", "2012-04-18-18-43-05", 1300],
# ["URG-04LX/2012-04/", "2012-04-18-18-45-31", 10594],
# ["URG-04LX/2012-04/", "2012-04-18-19-04-44", 16187],
# ["URG-04LX/2012-04/", "2012-04-18-19-31-45", 5325],
# ["URG-04LX/2012-04/", "2012-04-20-14-47-30", 4133],
# ["URG-04LX/2012-04/", "2012-04-20-15-04-07", 3646],
# ["URG-04LX/2012-04/", "2012-04-20-15-57-55", 4874],
# ["URG-04LX/2012-04/", "2012-04-20-16-06-01", 14178],
# ["URG-04LX/2012-04/", "2012-04-20-16-47-52", 1549],
# ["URG-04LX/2012-04/", "2012-04-20-16-50-28", 1120],
# ["URG-04LX/2012-04/", "2012-04-20-16-52-22", 6933],
# ["URG-04LX/2012-04/", "2012-04-20-17-03-59", 3586],
# ["URG-04LX/2012-04/", "2012-04-20-17-10-02", 8626],
# ["URG-04LX/2012-04/", "2012-04-20-17-54-10", 1620],
# ["URG-04LX/2012-04/", "2012-04-20-17-56-53", 859],
# ["URG-04LX/2012-04/", "2012-04-20-17-58-21", 9509],
# ["URG-04LX/2012-04/", "2012-04-20-19-04-03", 1002],
# ["URG-04LX/2012-04/", "2012-04-20-19-05-47", 13977],
# ["URG-04LX/2012-04/", "2012-04-20-19-29-08", 5292],
# ["URG-04LX/2012-04/", "2012-04-20-19-39-33", 4641],
# ["URG-04LX/2012-04/", "2012-04-20-20-37-49", 9747],
# ["URG-04LX/2012-04/", "2012-04-20-21-03-28", 1508],
# ["URG-04LX/2012-04/", "2012-04-20-21-06-49", 1003],
# ["URG-04LX/2012-04/", "2012-04-20-21-12-35", 3926],
# ["URG-04LX/2012-04/", "2012-04-20-21-19-10", 3674],
# ["URG-04LX/2012-04/", "2012-04-20-21-26-38", 836],
# ["URG-04LX/2012-04/", "2012-04-20-21-28-21", 2722],
# ["URG-04LX/2012-04/", "2012-04-20-21-32-55", 3756],
# ["URG-04LX/2012-04/", "2012-04-23-15-53-11", 1280],
# ["URG-04LX/2012-04/", "2012-04-23-15-55-24", 761],
# ["URG-04LX/2012-04/", "2012-04-23-15-58-32", 2779],
# ["URG-04LX/2012-04/", "2012-04-23-16-03-15", 1532],
# ["URG-04LX/2012-04/", "2012-04-23-16-08-38", 1158],
# ["URG-04LX/2012-04/", "2012-04-23-16-10-53", 1924],
# ["URG-04LX/2012-04/", "2012-04-23-16-14-29", 853],
# ["URG-04LX/2012-04/", "2012-04-24-14-20-05", 4862],
# ["URG-04LX/2012-04/", "2012-04-25-14-58-29", 8628],
# ["URG-04LX/2012-04/", "2012-04-25-15-12-50", 698],
# ["URG-04LX/2012-04/", "2012-04-25-15-17-57", 1130],
# ["URG-04LX/2012-04/", "2012-04-25-15-19-56", 5200],
# ["URG-04LX/2012-04/", "2012-04-25-15-29-44", 2317],
# ["URG-04LX/2012-04/", "2012-04-25-15-33-38", 19433],
# ["URG-04LX/2012-04/", "2012-04-26-13-55-39", 12418],
# ["URG-04LX/2012-04/", "2012-04-26-14-16-19", 970],
# ["URG-04LX/2012-04/", "2012-04-26-15-19-23", 2449],
# ["URG-04LX/2012-04/", "2012-04-26-15-23-29", 2048],
# ["URG-04LX/2012-04/", "2012-04-26-15-27-07", 1129],
# ["URG-04LX/2012-04/", "2012-04-26-15-29-33", 883],
# ["URG-04LX/2012-04/", "2012-04-26-19-09-07", 9164],
# ["URG-04LX/2012-04/", "2012-04-26-19-24-26", 7239],
# ["URG-04LX/2012-04/", "2012-04-30-13-20-24", 20281],
# 
# # 2012-05
# ["URG-04LX/2012-05/", "2012-05-01-19-48-42", 5197],
# ["URG-04LX/2012-05/", "2012-05-01-19-59-08", 8114],
# ["URG-04LX/2012-05/", "2012-05-02-18-59-12", 10425],
# ["URG-04LX/2012-05/", "2012-05-04-15-26-11", 7323],
# ["URG-04LX/2012-05/", "2012-05-04-19-46-07", 2263],
# ["URG-04LX/2012-05/", "2012-05-04-19-49-54", 1551],
# ["URG-04LX/2012-05/", "2012-05-10-12-54-28", 23679],
# ["URG-04LX/2012-05/", "2012-05-10-13-33-48", 967],
# ["URG-04LX/2012-05/", "2012-05-10-13-35-26", 4705],
# ["URG-04LX/2012-05/", "2012-05-10-14-55-40", 8252],
# ["URG-04LX/2012-05/", "2012-05-14-18-17-03", 16284],
# ["URG-04LX/2012-05/", "2012-05-14-18-44-07", 1464],
# ["URG-04LX/2012-05/", "2012-05-14-18-46-35", 2043],
# ["URG-04LX/2012-05/", "2012-05-14-18-51-55", 1346],
# ["URG-04LX/2012-05/", "2012-05-14-18-54-13", 986],
# ["URG-04LX/2012-05/", "2012-05-14-18-55-54", 1530],
# ["URG-04LX/2012-05/", "2012-05-14-18-58-48", 997],
# ["URG-04LX/2012-05/", "2012-05-14-19-00-30", 985],
# ["URG-04LX/2012-05/", "2012-05-14-19-02-10", 1616],
# ["URG-04LX/2012-05/", "2012-05-15-18-55-31", 23075],
# ["URG-04LX/2012-05/", "2012-05-17-15-51-57", 592],
# ["URG-04LX/2012-05/", "2012-05-17-15-52-58", 5493],
# ["URG-04LX/2012-05/", "2012-05-21-17-11-37", 2020],
# ["URG-04LX/2012-05/", "2012-05-21-17-15-07", 766],
# ["URG-04LX/2012-05/", "2012-05-21-17-16-56", 2589],
# ["URG-04LX/2012-05/", "2012-05-22-18-16-07", 1366],
# ["URG-04LX/2012-05/", "2012-05-22-18-23-20", 1131],
# ["URG-04LX/2012-05/", "2012-05-22-18-25-14", 1009],
# ["URG-04LX/2012-05/", "2012-05-22-18-27-17", 1523],
# ["URG-04LX/2012-05/", "2012-05-22-18-29-52", 590],
# ["URG-04LX/2012-05/", "2012-05-23-15-06-54", 18849],
# ["URG-04LX/2012-05/", "2012-05-23-17-25-28", 831],
# ["URG-04LX/2012-05/", "2012-05-23-17-26-53", 1093],
# ["URG-04LX/2012-05/", "2012-05-24-17-29-42", 4281],
# ["URG-04LX/2012-05/", "2012-05-24-17-38-05", 5781],
# ["URG-04LX/2012-05/", "2012-05-24-19-58-18", 5004],
# ["URG-04LX/2012-05/", "2012-05-25-17-17-35", 9898],
# ["URG-04LX/2012-05/", "2012-05-29-15-01-42", 1385],
# ["URG-04LX/2012-05/", "2012-05-29-15-04-02", 755],
# ["URG-04LX/2012-05/", "2012-05-29-15-05-19", 1267],
# 
# # 2012-06
# ["URG-04LX/2012-06/", "2012-06-07-16-27-54", 4560],
# ["URG-04LX/2012-06/", "2012-06-07-16-47-33", 24348],
# ["URG-04LX/2012-06/", "2012-06-07-17-57-34", 8627],
# ["URG-04LX/2012-06/", "2012-06-08-02-36-30", 2027],
# ["URG-04LX/2012-06/", "2012-06-19-16-37-09", 2098],
# ["URG-04LX/2012-06/", "2012-06-19-17-04-04", 1698],
# ["URG-04LX/2012-06/", "2012-06-19-17-07-37", 4383],
# ["URG-04LX/2012-06/", "2012-06-19-17-14-55", 645],
# ["URG-04LX/2012-06/", "2012-06-19-17-38-15", 7334],
# ["URG-04LX/2012-06/", "2012-06-19-17-55-02", 1126],
# ["URG-04LX/2012-06/", "2012-06-19-18-22-15", 801],
# ["URG-04LX/2012-06/", "2012-06-19-19-08-33", 9197],
# ["URG-04LX/2012-06/", "2012-06-19-19-35-21", 1184],
# ["URG-04LX/2012-06/", "2012-06-19-20-40-57", 6630],
# ["URG-04LX/2012-06/", "2012-06-19-20-52-15", 7131],
# ["URG-04LX/2012-06/", "2012-06-19-21-04-17", 1441],
# ["URG-04LX/2012-06/", "2012-06-19-21-06-58", 3510],
# ["URG-04LX/2012-06/", "2012-06-19-21-29-12", 1604],
# ["URG-04LX/2012-06/", "2012-06-28-19-44-59", 6010],
# ["URG-04LX/2012-06/", "2012-06-28-19-55-54", 4501],
# 
# # 2012-07
# ["URG-04LX/2012-07/", "2012-07-03-15-42-36", 10110],
# ["URG-04LX/2012-07/", "2012-07-03-16-03-13", 5741],
# ["URG-04LX/2012-07/", "2012-07-03-16-16-57", 8603],
# ["URG-04LX/2012-07/", "2012-07-05-20-35-44", 12311],
# ["URG-04LX/2012-07/", "2012-07-09-18-12-52", 4588],
# ["URG-04LX/2012-07/", "2012-07-09-18-41-56", 1700],
# ["URG-04LX/2012-07/", "2012-07-09-19-04-15", 4446],
# ["URG-04LX/2012-07/", "2012-07-09-20-46-05", 23180],
# ["URG-04LX/2012-07/", "2012-07-11-19-52-13", 2069],
# ["URG-04LX/2012-07/", "2012-07-11-20-10-17", 2659],
# ["URG-04LX/2012-07/", "2012-07-11-20-26-15", 5373],
# ["URG-04LX/2012-07/", "2012-07-19-21-08-59", 30885],
# ["URG-04LX/2012-07/", "2012-07-20-00-25-06", 10167],
# ["URG-04LX/2012-07/", "2012-07-20-00-48-26", 62545],
# ["URG-04LX/2012-07/", "2012-07-20-20-29-47", 38333],
# ["URG-04LX/2012-07/", "2012-07-20-20-47-40", 12804],
# ["URG-04LX/2012-07/", "2012-07-20-20-53-56", 2974],
# ["URG-04LX/2012-07/", "2012-07-20-20-55-12", 13099],
# ["URG-04LX/2012-07/", "2012-07-20-21-00-44", 7348],
# ["URG-04LX/2012-07/", "2012-07-23-16-50-46", 17961],
# ["URG-04LX/2012-07/", "2012-07-23-16-57-14", 33090],
# ["URG-04LX/2012-07/", "2012-07-23-17-09-18", 28095],
# ["URG-04LX/2012-07/", "2012-07-23-18-34-39", 50951],
# ["URG-04LX/2012-07/", "2012-07-23-18-52-22", 21432],
# ["URG-04LX/2012-07/", "2012-07-23-19-01-45", 45442],
# ["URG-04LX/2012-07/", "2012-07-25-21-42-56", 8908],
# ["URG-04LX/2012-07/", "2012-07-25-21-51-13", 45363],
# ["URG-04LX/2012-07/", "2012-07-26-18-44-03", 47846],
# ["URG-04LX/2012-07/", "2012-07-26-19-00-55", 32318],
# ["URG-04LX/2012-07/", "2012-07-27-00-02-41", 26502],
# ["URG-04LX/2012-07/", "2012-07-27-00-12-08", 29308],
# ["URG-04LX/2012-07/", "2012-07-27-15-14-41", 56705],
# ["URG-04LX/2012-07/", "2012-07-27-15-34-31", 57007],
# ["URG-04LX/2012-07/", "2012-07-31-20-59-11", 64195],
# 
# # 2012-08
# ["URG-04LX/2012-08/", "2012-08-01-00-56-26", 64574],
# ["URG-04LX/2012-08/", "2012-08-08-18-16-53", 9294],
# ["URG-04LX/2012-08/", "2012-08-24-22-55-41", 16884],
# ["URG-04LX/2012-08/", "2012-08-25-00-15-39", 19974],
# ["URG-04LX/2012-08/", "2012-08-28-18-58-37", 31869],
# ["URG-04LX/2012-08/", "2012-08-30-00-44-46", 87021],
# ["URG-04LX/2012-08/", "2012-08-31-20-11-11", 40370],
# 
# # 2012-09
# ["URG-04LX/2012-09/", "2012-09-05-16-32-34", 56088],
# ["URG-04LX/2012-09/", "2012-09-06-15-27-03", 2507],
# ["URG-04LX/2012-09/", "2012-09-06-15-28-41", 14569],
# ["URG-04LX/2012-09/", "2012-09-06-17-53-36", 15035],
# ["URG-04LX/2012-09/", "2012-09-06-17-58-53", 5805],
# ["URG-04LX/2012-09/", "2012-09-06-18-46-12", 3622],
# ["URG-04LX/2012-09/", "2012-09-06-18-47-28", 18883],
# ["URG-04LX/2012-09/", "2012-09-12-17-57-07", 22354],
# ["URG-04LX/2012-09/", "2012-09-12-18-05-06", 15632],
# ["URG-04LX/2012-09/", "2012-09-12-18-10-43", 7702],
# ["URG-04LX/2012-09/", "2012-09-13-15-13-34", 7627],
# ["URG-04LX/2012-09/", "2012-09-13-15-16-10", 8789],
# ["URG-04LX/2012-09/", "2012-09-13-15-19-11", 5807],
# ["URG-04LX/2012-09/", "2012-09-13-15-21-10", 9708],
# ["URG-04LX/2012-09/", "2012-09-13-16-38-44", 27073],
# ["URG-04LX/2012-09/", "2012-09-13-16-47-59", 36527],
# ["URG-04LX/2012-09/", "2012-09-13-17-00-27", 9305],
# ["URG-04LX/2012-09/", "2012-09-20-18-39-33", 17409],
# ["URG-04LX/2012-09/", "2012-09-20-19-17-30", 28213],
# ["URG-04LX/2012-09/", "2012-09-23-16-31-11", 1645],
# ["URG-04LX/2012-09/", "2012-09-23-17-16-24", 4098],
# ["URG-04LX/2012-09/", "2012-09-25-18-06-31", 36564],
# ["URG-04LX/2012-09/", "2012-09-25-19-10-32", 3199],
# ["URG-04LX/2012-09/", "2012-09-25-19-15-57", 1031],
# ["URG-04LX/2012-09/", "2012-09-27-17-14-11", 5649],
# ["URG-04LX/2012-09/", "2012-09-27-23-18-51", 4543],
# ["URG-04LX/2012-09/", "2012-09-28-14-14-27", 4747],
# ["URG-04LX/2012-09/", "2012-09-28-15-23-58", 24376],
# 
# # 2012-10
# ["URG-04LX/2012-10/", "2012-10-03-17-55-54", 3444],
# ["URG-04LX/2012-10/", "2012-10-03-19-02-27", 17130],
# ["URG-04LX/2012-10/", "2012-10-03-20-07-41", 13906],
# ["URG-04LX/2012-10/", "2012-10-11-21-23-22", 4188],
# ["URG-04LX/2012-10/", "2012-10-11-22-44-19", 1680],
# ["URG-04LX/2012-10/", "2012-10-12-06-21-35", 3887],
# ["URG-04LX/2012-10/", "2012-10-12-06-28-39", 751],
# ["URG-04LX/2012-10/", "2012-10-12-06-37-11", 3680],
# ["URG-04LX/2012-10/", "2012-10-12-09-54-47", 3385],
# ["URG-04LX/2012-10/", "2012-10-12-10-01-15", 5866],
# ["URG-04LX/2012-10/", "2012-10-12-10-12-22", 2144],
# ["URG-04LX/2012-10/", "2012-10-12-18-22-37", 27048],
# ["URG-04LX/2012-10/", "2012-10-15-19-24-36", 3576],
# ["URG-04LX/2012-10/", "2012-10-15-20-11-14", 8746],
# ["URG-04LX/2012-10/", "2012-10-15-22-38-47", 1098],
# ["URG-04LX/2012-10/", "2012-10-15-22-40-38", 2641],
# ["URG-04LX/2012-10/", "2012-10-15-23-03-14", 1262],
# ["URG-04LX/2012-10/", "2012-10-15-23-05-21", 1279],
# ["URG-04LX/2012-10/", "2012-10-16-01-19-41", 675],
# ["URG-04LX/2012-10/", "2012-10-16-01-20-50", 1953],
# ["URG-04LX/2012-10/", "2012-10-16-01-24-07", 1631],
# ["URG-04LX/2012-10/", "2012-10-16-01-26-51", 2315],
# ["URG-04LX/2012-10/", "2012-10-16-02-12-29", 925],
# ["URG-04LX/2012-10/", "2012-10-16-02-14-37", 774],
# ["URG-04LX/2012-10/", "2012-10-16-02-15-56", 2033],
# ["URG-04LX/2012-10/", "2012-10-16-02-19-20", 22720],
# ["URG-04LX/2012-10/", "2012-10-16-14-32-21", 2939],
# ["URG-04LX/2012-10/", "2012-10-16-14-37-16", 5788],
# ["URG-04LX/2012-10/", "2012-10-16-14-46-54", 6160],
# ["URG-04LX/2012-10/", "2012-10-16-21-45-07", 1900],
# ["URG-04LX/2012-10/", "2012-10-17-13-28-31", 9241],
# ["URG-04LX/2012-10/", "2012-10-17-13-43-57", 1869],
# ["URG-04LX/2012-10/", "2012-10-19-22-54-01", 1416],
# ["URG-04LX/2012-10/", "2012-10-22-15-02-50", 3917],
# ["URG-04LX/2012-10/", "2012-10-22-15-09-42", 3793],
# ["URG-04LX/2012-10/", "2012-10-22-15-16-04", 801],
# ["URG-04LX/2012-10/", "2012-10-22-15-17-26", 772],
# ["URG-04LX/2012-10/", "2012-10-22-15-31-06", 17797],
# ["URG-04LX/2012-10/", "2012-10-25-21-45-27", 10097],
# ["URG-04LX/2012-10/", "2012-10-25-23-02-26", 3845],
# ["URG-04LX/2012-10/", "2012-10-25-23-10-56", 1907],
# ["URG-04LX/2012-10/", "2012-10-25-23-15-22", 2109],
# ["URG-04LX/2012-10/", "2012-10-27-21-18-08", 1264],
# ["URG-04LX/2012-10/", "2012-10-27-21-21-52", 4708],
# ["URG-04LX/2012-10/", "2012-10-30-15-17-20", 26798],
# ["URG-04LX/2012-10/", "2012-10-30-16-02-16", 1050],
# ["URG-04LX/2012-10/", "2012-10-30-16-04-03", 892],
# ["URG-04LX/2012-10/", "2012-10-30-16-05-34", 14194],
# ["URG-04LX/2012-10/", "2012-10-30-18-48-02", 5620],
# ["URG-04LX/2012-10/", "2012-10-30-18-57-29", 906],
# ["URG-04LX/2012-10/", "2012-10-30-18-59-17", 19259],
# ["URG-04LX/2012-10/", "2012-10-30-19-57-16", 22061],
# ["URG-04LX/2012-10/", "2012-10-31-15-11-44", 17090],
# ["URG-04LX/2012-10/", "2012-10-31-15-56-31", 7072],
# ["URG-04LX/2012-10/", "2012-10-31-16-27-10", 14271],
# ["URG-04LX/2012-10/", "2012-10-31-17-55-23", 16758],
# ["URG-04LX/2012-10/", "2012-10-31-18-24-43", 11273],
# ["URG-04LX/2012-10/", "2012-10-31-18-45-04", 17502],
# 
# # 2012-11
# ["URG-04LX/2012-11/", "2012-11-05-02-36-53", 4399],
# ["URG-04LX/2012-11/", "2012-11-06-05-13-48", 6983],
# ["URG-04LX/2012-11/", "2012-11-06-05-35-26", 23070],
# ["URG-04LX/2012-11/", "2012-11-08-03-37-59", 4775],
# ["URG-04LX/2012-11/", "2012-11-08-03-46-31", 3249],
# ["URG-04LX/2012-11/", "2012-11-08-21-31-26", 3245],
# ["URG-04LX/2012-11/", "2012-11-08-21-37-23", 4607],
# ["URG-04LX/2012-11/", "2012-11-09-20-21-15", 4966],
# ["URG-04LX/2012-11/", "2012-11-09-22-07-48", 2945],
# ["URG-04LX/2012-11/", "2012-11-09-22-13-42", 774],
# ["URG-04LX/2012-11/", "2012-11-09-22-16-40", 5218],
# ["URG-04LX/2012-11/", "2012-11-10-17-14-53", 1161],
# ["URG-04LX/2012-11/", "2012-11-10-17-19-11", 3514],
# ["URG-04LX/2012-11/", "2012-11-10-20-16-56", 18508],
# ["URG-04LX/2012-11/", "2012-11-14-20-09-12", 11544],
# ["URG-04LX/2012-11/", "2012-11-14-20-45-14", 4848],
# ["URG-04LX/2012-11/", "2012-11-19-20-59-13", 3304],
# ["URG-04LX/2012-11/", "2012-11-19-23-43-16", 7830],
# ["URG-04LX/2012-11/", "2012-11-19-23-57-36", 1099],
# ["URG-04LX/2012-11/", "2012-11-20-15-51-50", 19231],
# ["URG-04LX/2012-11/", "2012-11-20-20-43-49", 1435],
# ["URG-04LX/2012-11/", "2012-11-20-20-55-20", 3176],
# ["URG-04LX/2012-11/", "2012-11-20-21-24-27", 861],
# ["URG-04LX/2012-11/", "2012-11-28-18-10-35", 26909],
# ["URG-04LX/2012-11/", "2012-11-28-19-31-53", 9510],
# 
# # 2012-12
# ["URG-04LX/2012-12/", "2012-12-04-03-16-30", 487],
# ["URG-04LX/2012-12/", "2012-12-04-03-16-55", 273],
# ["URG-04LX/2012-12/", "2012-12-04-03-17-15", 332],
# ["URG-04LX/2012-12/", "2012-12-04-03-31-01", 2051],
# ["URG-04LX/2012-12/", "2012-12-04-03-34-25", 1586],
# ["URG-04LX/2012-12/", "2012-12-04-03-38-12", 3122],
# ["URG-04LX/2012-12/", "2012-12-04-03-44-13", 1052],
# ["URG-04LX/2012-12/", "2012-12-04-03-45-58", 2497],
# ["URG-04LX/2012-12/", "2012-12-04-03-53-10", 2004],
# ["URG-04LX/2012-12/", "2012-12-04-03-59-47", 1223],
# ["URG-04LX/2012-12/", "2012-12-04-04-01-49", 2296],
# ["URG-04LX/2012-12/", "2012-12-04-04-30-06", 817],
# ["URG-04LX/2012-12/", "2012-12-04-04-31-27", 758],
# ["URG-04LX/2012-12/", "2012-12-04-04-42-05", 770],
# ["URG-04LX/2012-12/", "2012-12-04-05-06-44", 1311],
# ["URG-04LX/2012-12/", "2012-12-04-05-24-28", 770],
# ["URG-04LX/2012-12/", "2012-12-04-05-25-44", 2061],
# ["URG-04LX/2012-12/", "2012-12-05-16-44-32", 6757],
# ["URG-04LX/2012-12/", "2012-12-06-15-44-11", 1093],
# ["URG-04LX/2012-12/", "2012-12-06-15-48-30", 3573],
# ["URG-04LX/2012-12/", "2012-12-06-15-56-01", 894],
# ["URG-04LX/2012-12/", "2012-12-06-16-00-06", 4967],
# ["URG-04LX/2012-12/", "2012-12-06-16-08-34", 17308],
# 
# # 2013-01
# ["URG-04LX/2013-01/", "2013-01-07-20-59-55", 1857],
# ["URG-04LX/2013-01/", "2013-01-07-21-07-47", 1599],
# ["URG-04LX/2013-01/", "2013-01-07-21-34-46", 2567],
# ["URG-04LX/2013-01/", "2013-01-07-21-39-51", 2359],
# ["URG-04LX/2013-01/", "2013-01-07-21-44-22", 861],
# ["URG-04LX/2013-01/", "2013-01-07-21-46-39", 4812],
# ["URG-04LX/2013-01/", "2013-01-10-22-28-17", 2404],
# ["URG-04LX/2013-01/", "2013-01-10-22-33-19", 2480],
# ["URG-04LX/2013-01/", "2013-01-10-22-40-29", 4184],
# ["URG-04LX/2013-01/", "2013-01-10-23-27-50", 796],
# ["URG-04LX/2013-01/", "2013-01-10-23-29-56", 805],
# ["URG-04LX/2013-01/", "2013-01-10-23-31-52", 749],
# ["URG-04LX/2013-01/", "2013-01-10-23-34-39", 789],
# ["URG-04LX/2013-01/", "2013-01-10-23-36-27", 846],
# ["URG-04LX/2013-01/", "2013-01-10-23-38-27", 503],
# ["URG-04LX/2013-01/", "2013-01-10-23-40-36", 662],
# ["URG-04LX/2013-01/", "2013-01-10-23-42-53", 569],
# ["URG-04LX/2013-01/", "2013-01-10-23-44-42", 1254],
# ["URG-04LX/2013-01/", "2013-01-11-02-13-20", 564],
# ["URG-04LX/2013-01/", "2013-01-11-02-14-46", 877],
# ["URG-04LX/2013-01/", "2013-01-11-02-18-36", 626],
# ["URG-04LX/2013-01/", "2013-01-16-19-41-01", 18257],
# ["URG-04LX/2013-01/", "2013-01-16-21-22-14", 11500],
# ["URG-04LX/2013-01/", "2013-01-16-23-10-23", 560],
# ["URG-04LX/2013-01/", "2013-01-16-23-11-38", 10147],
# ["URG-04LX/2013-01/", "2013-01-16-23-43-09", 3887],
# ["URG-04LX/2013-01/", "2013-01-17-02-28-40", 16863],
# ["URG-04LX/2013-01/", "2013-01-17-02-57-16", 798],
# ["URG-04LX/2013-01/", "2013-01-17-02-58-51", 10650],
# ["URG-04LX/2013-01/", "2013-01-17-14-21-58", 1671],
# ["URG-04LX/2013-01/", "2013-01-17-15-40-34", 688],
# ["URG-04LX/2013-01/", "2013-01-17-15-41-47", 32754],
# ["URG-04LX/2013-01/", "2013-01-17-16-58-11", 9077],
# ["URG-04LX/2013-01/", "2013-01-17-22-03-13", 9874],
# ["URG-04LX/2013-01/", "2013-01-18-02-48-23", 4645],
# ["URG-04LX/2013-01/", "2013-01-18-03-28-33", 3875],
# ["URG-04LX/2013-01/", "2013-01-18-16-24-54", 27077],
# ["URG-04LX/2013-01/", "2013-01-18-17-15-05", 6453],
# ["URG-04LX/2013-01/", "2013-01-21-01-37-52", 4450],
# ["URG-04LX/2013-01/", "2013-01-21-01-58-24", 2427],
# ["URG-04LX/2013-01/", "2013-01-21-02-13-57", 2419],
# ["URG-04LX/2013-01/", "2013-01-21-20-29-54", 41891],
# ["URG-04LX/2013-01/", "2013-01-22-19-32-37", 3137],
# ["URG-04LX/2013-01/", "2013-01-22-19-42-52", 3742],
# ["URG-04LX/2013-01/", "2013-01-22-19-49-56", 3546],
# ["URG-04LX/2013-01/", "2013-01-22-19-56-25", 3273],
# ["URG-04LX/2013-01/", "2013-01-22-20-08-31", 4082],
# ["URG-04LX/2013-01/", "2013-01-22-20-15-21", 967],
# ["URG-04LX/2013-01/", "2013-01-22-22-08-22", 1282],
# ["URG-04LX/2013-01/", "2013-01-22-22-11-13", 768],
# ["URG-04LX/2013-01/", "2013-01-23-16-52-00", 620],
# ["URG-04LX/2013-01/", "2013-01-23-16-53-05", 10586],
# ["URG-04LX/2013-01/", "2013-01-23-17-11-34", 2990],
# ["URG-04LX/2013-01/", "2013-01-23-17-17-12", 1223],
# ["URG-04LX/2013-01/", "2013-01-23-22-29-18", 9480],
# ["URG-04LX/2013-01/", "2013-01-24-19-02-13", 12916],
# ["URG-04LX/2013-01/", "2013-01-24-19-24-01", 1263],
# ["URG-04LX/2013-01/", "2013-01-24-19-27-12", 7750],
# ["URG-04LX/2013-01/", "2013-01-24-22-38-19", 1014],
# ["URG-04LX/2013-01/", "2013-01-24-22-56-32", 663],
# ["URG-04LX/2013-01/", "2013-01-24-23-15-27", 833],
# ["URG-04LX/2013-01/", "2013-01-24-23-17-28", 493],
# ["URG-04LX/2013-01/", "2013-01-24-23-24-08", 831],
# ["URG-04LX/2013-01/", "2013-01-24-23-37-28", 689],
# ["URG-04LX/2013-01/", "2013-01-24-23-39-01", 879],
# ["URG-04LX/2013-01/", "2013-01-24-23-40-54", 682],
# ["URG-04LX/2013-01/", "2013-01-24-23-42-29", 822],
# ["URG-04LX/2013-01/", "2013-01-24-23-45-40", 755],
# ["URG-04LX/2013-01/", "2013-01-24-23-47-48", 994],
# ["URG-04LX/2013-01/", "2013-01-24-23-50-48", 972],
# ["URG-04LX/2013-01/", "2013-01-24-23-53-23", 773],
# ["URG-04LX/2013-01/", "2013-01-24-23-55-02", 988],
# ["URG-04LX/2013-01/", "2013-01-24-23-57-04", 1227],
# ["URG-04LX/2013-01/", "2013-01-25-01-12-57", 524],
# ["URG-04LX/2013-01/", "2013-01-25-02-25-07", 850],
# ["URG-04LX/2013-01/", "2013-01-25-02-26-51", 665],
# ["URG-04LX/2013-01/", "2013-01-25-02-29-57", 975],
# ["URG-04LX/2013-01/", "2013-01-25-02-31-54", 658],
# ["URG-04LX/2013-01/", "2013-01-25-02-34-46", 807],
# ["URG-04LX/2013-01/", "2013-01-25-02-38-11", 1445],
# ["URG-04LX/2013-01/", "2013-01-25-02-43-54", 2212],
# ["URG-04LX/2013-01/", "2013-01-25-02-48-10", 949],
# ["URG-04LX/2013-01/", "2013-01-25-02-50-03", 2108],
# ["URG-04LX/2013-01/", "2013-01-25-02-55-31", 3089],
# ["URG-04LX/2013-01/", "2013-01-25-03-00-59", 2130],
# ["URG-04LX/2013-01/", "2013-01-29-14-44-21", 1716],
# ["URG-04LX/2013-01/", "2013-01-29-14-47-13", 1387],
# ["URG-04LX/2013-01/", "2013-01-29-14-49-31", 1636],
# ["URG-04LX/2013-01/", "2013-01-29-14-52-14", 1100],
# ["URG-04LX/2013-01/", "2013-01-29-14-54-44", 1890],
# ["URG-04LX/2013-01/", "2013-01-29-14-57-52", 3543],
# ["URG-04LX/2013-01/", "2013-01-29-15-04-15", 2474],
# ["URG-04LX/2013-01/", "2013-01-29-15-12-06", 2662],
# ["URG-04LX/2013-01/", "2013-01-29-15-46-51", 1600],
# ["URG-04LX/2013-01/", "2013-01-29-15-49-31", 4095],
# ["URG-04LX/2013-01/", "2013-01-30-18-58-31", 2949],
# ["URG-04LX/2013-01/", "2013-01-30-23-20-00", 1351],
# ["URG-04LX/2013-01/", "2013-01-30-23-22-43", 1888],
# ["URG-04LX/2013-01/", "2013-01-30-23-26-19", 1491],
# ["URG-04LX/2013-01/", "2013-01-30-23-29-06", 2155],
# ["URG-04LX/2013-01/", "2013-01-30-23-33-01", 1334],
# ["URG-04LX/2013-01/", "2013-01-30-23-36-17", 1062],
# ["URG-04LX/2013-01/", "2013-01-30-23-38-39", 2455],
# ["URG-04LX/2013-01/", "2013-01-31-01-05-08", 4246],
# ["URG-04LX/2013-01/", "2013-01-31-01-12-33", 1225],
# ["URG-04LX/2013-01/", "2013-01-31-01-21-20", 1603],
# ["URG-04LX/2013-01/", "2013-01-31-01-24-00", 820],
# ["URG-04LX/2013-01/", "2013-01-31-01-25-22", 1827],
# ["URG-04LX/2013-01/", "2013-01-31-01-29-05", 1112],
# ["URG-04LX/2013-01/", "2013-01-31-01-31-24", 10236],
# ["URG-04LX/2013-01/", "2013-01-31-02-07-28", 1586],
# ["URG-04LX/2013-01/", "2013-01-31-02-10-06", 2348],
# ["URG-04LX/2013-01/", "2013-01-31-02-14-00", 2740],
# ["URG-04LX/2013-01/", "2013-01-31-02-18-33", 1690],
# ["URG-04LX/2013-01/", "2013-01-31-02-21-21", 1185],
# ["URG-04LX/2013-01/", "2013-01-31-02-23-19", 2293],
# ["URG-04LX/2013-01/", "2013-01-31-02-30-48", 1614],
# ["URG-04LX/2013-01/", "2013-01-31-02-37-48", 2929],
# ["URG-04LX/2013-01/", "2013-01-31-02-42-42", 1937],
# ["URG-04LX/2013-01/", "2013-01-31-04-48-19", 9205],
# ["URG-04LX/2013-01/", "2013-01-31-05-09-52", 3964],
# ["URG-04LX/2013-01/", "2013-01-31-05-16-29", 1147],
# ["URG-04LX/2013-01/", "2013-01-31-05-18-23", 660],
# ["URG-04LX/2013-01/", "2013-01-31-05-19-29", 1646],
# ["URG-04LX/2013-01/", "2013-01-31-05-22-45", 780],
# ["URG-04LX/2013-01/", "2013-01-31-15-54-59", 34096],
# 
# # 2013-02
# ["URG-04LX/2013-02/", "2013-02-01-04-48-52", 1150],
# ["URG-04LX/2013-02/", "2013-02-01-04-51-03", 959],
# ["URG-04LX/2013-02/", "2013-02-01-04-54-20", 937],
# ["URG-04LX/2013-02/", "2013-02-01-04-57-51", 844],
# ["URG-04LX/2013-02/", "2013-02-01-05-01-18", 959],
# ["URG-04LX/2013-02/", "2013-02-01-05-20-14", 2854],
# ["URG-04LX/2013-02/", "2013-02-01-06-01-45", 1387],
# ["URG-04LX/2013-02/", "2013-02-01-06-23-45", 1490],
# ["URG-04LX/2013-02/", "2013-02-01-06-29-44", 1804],
# ["URG-04LX/2013-02/", "2013-02-01-06-33-03", 1394],
# ["URG-04LX/2013-02/", "2013-02-01-06-35-41", 2263],
# ["URG-04LX/2013-02/", "2013-02-01-06-39-45", 1780],
# ["URG-04LX/2013-02/", "2013-02-01-06-43-10", 1546],
# ["URG-04LX/2013-02/", "2013-02-01-06-46-04", 1093],
# ["URG-04LX/2013-02/", "2013-02-01-06-48-14", 2020],
# ["URG-04LX/2013-02/", "2013-02-01-06-51-53", 1947],
# ["URG-04LX/2013-02/", "2013-02-01-06-55-29", 1901],
# ["URG-04LX/2013-02/", "2013-02-01-06-58-57", 1392],
# ["URG-04LX/2013-02/", "2013-02-01-07-01-43", 1459],
# ["URG-04LX/2013-02/", "2013-02-04-14-56-18", 13801],
# ["URG-04LX/2013-02/", "2013-02-04-15-27-01", 20021],
# ["URG-04LX/2013-02/", "2013-02-04-16-02-03", 2037],
# ["URG-04LX/2013-02/", "2013-02-04-16-06-24", 8953],
# ["URG-04LX/2013-02/", "2013-02-04-16-26-36", 1352],
# ["URG-04LX/2013-02/", "2013-02-04-17-32-23", 3609],
# ["URG-04LX/2013-02/", "2013-02-04-18-08-43", 5208],
# ["URG-04LX/2013-02/", "2013-02-04-18-26-08", 33151],
# ["URG-04LX/2013-02/", "2013-02-05-15-44-55", 31528],
# ["URG-04LX/2013-02/", "2013-02-05-18-25-08", 22612],
# ["URG-04LX/2013-02/", "2013-02-07-04-54-30", 14526],
# ["URG-04LX/2013-02/", "2013-02-07-19-51-43", 3874],
# ["URG-04LX/2013-02/", "2013-02-07-21-44-36", 20729],
# ["URG-04LX/2013-02/", "2013-02-08-15-26-30", 6356],
# ["URG-04LX/2013-02/", "2013-02-08-15-32-37", 13671],
# ["URG-04LX/2013-02/", "2013-02-20-15-03-08", 3853],
# ["URG-04LX/2013-02/", "2013-02-20-15-34-44", 11623],
# ["URG-04LX/2013-02/", "2013-02-20-15-54-37", 2403],
# ["URG-04LX/2013-02/", "2013-02-20-16-10-30", 4774],
# ["URG-04LX/2013-02/", "2013-02-20-17-09-49", 1809],
# ["URG-04LX/2013-02/", "2013-02-20-17-45-13", 2227],
# ["URG-04LX/2013-02/", "2013-02-20-19-17-19", 6129],
# ["URG-04LX/2013-02/", "2013-02-20-20-16-45", 19664],
# ["URG-04LX/2013-02/", "2013-02-21-18-36-59", 7864],
# ["URG-04LX/2013-02/", "2013-02-22-00-56-14", 10561],
# ["URG-04LX/2013-02/", "2013-02-22-01-43-14", 5697],
# ["URG-04LX/2013-02/", "2013-02-22-17-03-44", 1468],
# ["URG-04LX/2013-02/", "2013-02-22-17-06-12", 992],
# ["URG-04LX/2013-02/", "2013-02-22-17-07-53", 10759],
# ["URG-04LX/2013-02/", "2013-02-22-17-33-48", 712],
# ["URG-04LX/2013-02/", "2013-02-22-17-35-01", 721],
# ["URG-04LX/2013-02/", "2013-02-22-17-36-15", 4504],
# ["URG-04LX/2013-02/", "2013-02-22-17-46-40", 744],
# ["URG-04LX/2013-02/", "2013-02-22-17-47-56", 790],
# ["URG-04LX/2013-02/", "2013-02-22-17-49-16", 1304],
# ["URG-04LX/2013-02/", "2013-02-22-17-51-28", 1188],
# ["URG-04LX/2013-02/", "2013-02-22-17-53-28", 1671],
# ["URG-04LX/2013-02/", "2013-02-22-17-56-31", 1211],
# ["URG-04LX/2013-02/", "2013-02-22-18-21-31", 5962],
# ["URG-04LX/2013-02/", "2013-02-22-19-02-42", 1481],
# ["URG-04LX/2013-02/", "2013-02-22-19-05-12", 929],
# ["URG-04LX/2013-02/", "2013-02-22-19-06-46", 6411],
# ["URG-04LX/2013-02/", "2013-02-22-19-19-30", 92889],
# ["URG-04LX/2013-02/", "2013-02-27-20-12-24", 1460],
# ["URG-04LX/2013-02/", "2013-02-27-20-14-52", 1414],
# ["URG-04LX/2013-02/", "2013-02-27-20-17-15", 15234],
# ["URG-04LX/2013-02/", "2013-02-28-18-33-50", 9669],
# ["URG-04LX/2013-02/", "2013-02-28-18-50-54", 2552],
# ["URG-04LX/2013-02/", "2013-02-28-18-55-47", 4477],
# ["URG-04LX/2013-02/", "2013-02-28-19-03-57", 1609],
# 
# # 2013-03
# ["URG-04LX/2013-03/", "2013-03-06-15-19-16", 3362],
# ["URG-04LX/2013-03/", "2013-03-06-15-24-53", 731],
# ["URG-04LX/2013-03/", "2013-03-06-15-26-08", 29529],
# ["URG-04LX/2013-03/", "2013-03-06-18-21-53", 2116],
# ["URG-04LX/2013-03/", "2013-03-06-18-25-26", 1012],
# ["URG-04LX/2013-03/", "2013-03-06-18-27-08", 8978],
# ["URG-04LX/2013-03/", "2013-03-08-17-15-18", 9723],
# ["URG-04LX/2013-03/", "2013-03-08-17-34-00", 1884],
# ["URG-04LX/2013-03/", "2013-03-08-18-37-18", 5148],
# ["URG-04LX/2013-03/", "2013-03-08-23-04-48", 3868],
# ["URG-04LX/2013-03/", "2013-03-08-23-12-35", 10368],
# ["URG-04LX/2013-03/", "2013-03-08-23-35-59", 1519],
# ["URG-04LX/2013-03/", "2013-03-08-23-40-47", 2552],
# ["URG-04LX/2013-03/", "2013-03-08-23-54-37", 1733],
# ["URG-04LX/2013-03/", "2013-03-08-23-57-59", 2679],
# ["URG-04LX/2013-03/", "2013-03-09-20-47-41", 916],
# ["URG-04LX/2013-03/", "2013-03-09-20-49-14", 1354],
# ["URG-04LX/2013-03/", "2013-03-09-20-51-30", 11060],
# ["URG-04LX/2013-03/", "2013-03-12-18-46-34", 5336],
# ["URG-04LX/2013-03/", "2013-03-12-20-39-10", 32415],
# ["URG-04LX/2013-03/", "2013-03-12-22-22-36", 4248],
# ["URG-04LX/2013-03/", "2013-03-20-14-53-05", 6187],
# ["URG-04LX/2013-03/", "2013-03-20-15-03-22", 784],
# ["URG-04LX/2013-03/", "2013-03-20-15-04-42", 2635],
# ["URG-04LX/2013-03/", "2013-03-21-19-59-15", 2097],
# ["URG-04LX/2013-03/", "2013-03-21-20-02-45", 1201],
# ["URG-04LX/2013-03/", "2013-03-21-20-04-47", 2067],
# ["URG-04LX/2013-03/", "2013-03-21-20-15-50", 3125],
# ["URG-04LX/2013-03/", "2013-03-22-10-10-00", 50837],
# ["URG-04LX/2013-03/", "2013-03-25-19-24-32", 46015],
# ["URG-04LX/2013-03/", "2013-03-25-22-44-12", 68803],
# ["URG-04LX/2013-03/", "2013-03-26-17-48-59", 3578],
# ["URG-04LX/2013-03/", "2013-03-26-19-00-22", 6740],
# ["URG-04LX/2013-03/", "2013-03-26-19-11-35", 737],
# ["URG-04LX/2013-03/", "2013-03-26-19-12-51", 810],
# ["URG-04LX/2013-03/", "2013-03-29-13-29-50", 8613],
# ["URG-04LX/2013-03/", "2013-03-29-13-44-10", 3766],
# ["URG-04LX/2013-03/", "2013-03-29-13-50-27", 8915],
# ["URG-04LX/2013-03/", "2013-03-29-14-17-03", 22883],
# ["URG-04LX/2013-03/", "2013-03-29-14-55-05", 653],
# ["URG-04LX/2013-03/", "2013-03-29-14-56-12", 24812],
# 
# # 2013-04
# ["URG-04LX/2013-04/", "2013-04-02-20-02-40", 3828],
# ["URG-04LX/2013-04/", "2013-04-02-20-17-27", 4890],
# ["URG-04LX/2013-04/", "2013-04-02-20-31-22", 6462],
# ["URG-04LX/2013-04/", "2013-04-03-13-10-41", 21888],
# ["URG-04LX/2013-04/", "2013-04-03-13-50-37", 24183],
# ["URG-04LX/2013-04/", "2013-04-03-14-31-05", 787],
# ["URG-04LX/2013-04/", "2013-04-03-14-32-25", 24322],
# ["URG-04LX/2013-04/", "2013-04-03-17-06-19", 15581],
# ["URG-04LX/2013-04/", "2013-04-03-17-32-12", 2539],
# ["URG-04LX/2013-04/", "2013-04-03-17-40-07", 1226],
# ["URG-04LX/2013-04/", "2013-04-03-17-42-11", 8020],
# ["URG-04LX/2013-04/", "2013-04-03-18-32-06", 2164],
# ["URG-04LX/2013-04/", "2013-04-03-18-35-43", 1293],
# ["URG-04LX/2013-04/", "2013-04-03-18-37-52", 7020],
# ["URG-04LX/2013-04/", "2013-04-03-18-49-31", 3147],
# ["URG-04LX/2013-04/", "2013-04-03-18-54-45", 3024],
# ["URG-04LX/2013-04/", "2013-04-04-22-02-38", 36798],
# ["URG-04LX/2013-04/", "2013-04-04-23-18-21", 8140],
# ["URG-04LX/2013-04/", "2013-04-05-14-54-01", 1895],
# ["URG-04LX/2013-04/", "2013-04-05-14-57-47", 38553],
# ["URG-04LX/2013-04/", "2013-04-08-19-32-49", 59739],
# ["URG-04LX/2013-04/", "2013-04-11-16-10-18", 1073],
# ["URG-04LX/2013-04/", "2013-04-11-16-12-17", 33473],
# ["URG-04LX/2013-04/", "2013-04-11-17-08-21", 1367],
# ["URG-04LX/2013-04/", "2013-04-11-19-09-26", 3208],
# ["URG-04LX/2013-04/", "2013-04-11-19-14-47", 1119],
# ["URG-04LX/2013-04/", "2013-04-11-19-16-40", 1341],
# ["URG-04LX/2013-04/", "2013-04-11-19-51-22", 18202],
# ["URG-04LX/2013-04/", "2013-04-12-17-14-48", 3520],
# ["URG-04LX/2013-04/", "2013-04-12-17-20-39", 1545],
# ["URG-04LX/2013-04/", "2013-04-12-17-23-15", 3209],
# ["URG-04LX/2013-04/", "2013-04-17-14-58-44", 4591],
# ["URG-04LX/2013-04/", "2013-04-18-18-58-34", 16104],
# ["URG-04LX/2013-04/", "2013-04-19-13-56-45", 1274],
# ["URG-04LX/2013-04/", "2013-04-19-13-58-54", 741],
# ["URG-04LX/2013-04/", "2013-04-19-14-00-09", 3994],
# ["URG-04LX/2013-04/", "2013-04-19-14-06-48", 1020],
# ["URG-04LX/2013-04/", "2013-04-19-14-08-32", 604],
# ["URG-04LX/2013-04/", "2013-04-19-15-47-47", 17859],
# ["URG-04LX/2013-04/", "2013-04-19-16-17-28", 1085],
# ["URG-04LX/2013-04/", "2013-04-19-16-19-18", 8171],
# ["URG-04LX/2013-04/", "2013-04-19-16-57-25", 27582],
# ["URG-04LX/2013-04/", "2013-04-19-17-59-51", 24741],
# ["URG-04LX/2013-04/", "2013-04-19-22-11-03", 2706],
# ["URG-04LX/2013-04/", "2013-04-19-22-15-35", 1589],
# ["URG-04LX/2013-04/", "2013-04-19-22-18-15", 3324],
# ["URG-04LX/2013-04/", "2013-04-24-19-01-05", 2639],
# ["URG-04LX/2013-04/", "2013-04-25-15-27-13", 32663],
# ["URG-04LX/2013-04/", "2013-04-25-18-48-22", 21933],
# ["URG-04LX/2013-04/", "2013-04-25-19-25-41", 13237],
# ["URG-04LX/2013-04/", "2013-04-26-15-36-51", 2214],
# ["URG-04LX/2013-04/", "2013-04-26-15-40-34", 987],
# ["URG-04LX/2013-04/", "2013-04-26-15-42-23", 4172],
# ["URG-04LX/2013-04/", "2013-04-26-17-49-49", 19439],
# ["URG-04LX/2013-04/", "2013-04-26-18-22-06", 1055],
# ["URG-04LX/2013-04/", "2013-04-26-18-23-53", 1842],
# ["URG-04LX/2013-04/", "2013-04-29-15-54-15", 1700],
# ["URG-04LX/2013-04/", "2013-04-29-15-57-06", 5799],
# ["URG-04LX/2013-04/", "2013-04-29-16-26-22", 2123],
# ["URG-04LX/2013-04/", "2013-04-29-16-29-55", 3098],
# ["URG-04LX/2013-04/", "2013-04-29-16-35-05", 1827],
# ["URG-04LX/2013-04/", "2013-04-29-17-52-14", 4332],
# ["URG-04LX/2013-04/", "2013-04-29-17-59-29", 948],
# ["URG-04LX/2013-04/", "2013-04-29-18-01-05", 1118],
# ["URG-04LX/2013-04/", "2013-04-29-19-10-44", 3251],
# ["URG-04LX/2013-04/", "2013-04-29-19-16-10", 1507],
# ["URG-04LX/2013-04/", "2013-04-30-13-53-44", 24202],
# ["URG-04LX/2013-04/", "2013-04-30-19-11-16", 5180],
# 
# # 2013-05
# ["URG-04LX/2013-05/", "2013-05-03-12-44-09", 4650],
# ["URG-04LX/2013-05/", "2013-05-03-12-52-30", 1625],
# ["URG-04LX/2013-05/", "2013-05-03-12-55-14", 27254],
# ["URG-04LX/2013-05/", "2013-05-04-17-31-16", 1616],
# ["URG-04LX/2013-05/", "2013-05-04-17-33-58", 1303],
# ["URG-04LX/2013-05/", "2013-05-04-17-36-08", 6833],
# ["URG-04LX/2013-05/", "2013-05-04-21-39-04", 1566],
# ["URG-04LX/2013-05/", "2013-05-05-07-13-10", 7343],
# ["URG-04LX/2013-05/", "2013-05-05-07-25-23", 13595],
# ["URG-04LX/2013-05/", "2013-05-11-01-55-37", 3175],
# ["URG-04LX/2013-05/", "2013-05-14-18-30-24", 1130],
# ["URG-04LX/2013-05/", "2013-05-14-18-32-19", 863],
# ["URG-04LX/2013-05/", "2013-05-14-18-33-48", 966],
# ["URG-04LX/2013-05/", "2013-05-14-19-33-08", 4414],
# ["URG-04LX/2013-05/", "2013-05-14-19-40-29", 821],
# ["URG-04LX/2013-05/", "2013-05-14-19-41-53", 5898],
# ["URG-04LX/2013-05/", "2013-05-18-20-51-05", 2337],
# ["URG-04LX/2013-05/", "2013-05-18-20-54-59", 1324],
# ["URG-04LX/2013-05/", "2013-05-18-20-57-13", 40285],
# ["URG-04LX/2013-05/", "2013-05-20-23-13-32", 7636],
# 
# # 2013-06
# # None
# 
# # 2013-07
# ["URG-04LX/2013-07/", "2013-07-09-13-11-20", 16380],
# ["URG-04LX/2013-07/", "2013-07-11-17-14-43", 11349],
# ["URG-04LX/2013-07/", "2013-07-11-17-47-18", 3862],
# ["URG-04LX/2013-07/", "2013-07-12-13-29-27", 19605],
# 
# # 2013-08
# ["URG-04LX/2013-08/", "2013-08-01-17-10-44", 3014],
# ["URG-04LX/2013-08/", "2013-08-01-17-15-45", 2842],
# ["URG-04LX/2013-08/", "2013-08-01-17-20-40", 3152],
# ["URG-04LX/2013-08/", "2013-08-01-20-19-34", 21491],
# ["URG-04LX/2013-08/", "2013-08-06-21-40-53", 12152],
# 
# # 2013-09
# ["URG-04LX/2013-09/", "2013-09-03-18-37-20", 7590],
# ["URG-04LX/2013-09/", "2013-09-03-20-04-24", 6408],
# ["URG-04LX/2013-09/", "2013-09-04-15-30-13", 18093],
# ["URG-04LX/2013-09/", "2013-09-04-16-03-33", 16787],
# ["URG-04LX/2013-09/", "2013-09-04-18-38-35", 32819],
# ["URG-04LX/2013-09/", "2013-09-04-20-10-59", 8608],
# ["URG-04LX/2013-09/", "2013-09-05-17-41-31", 1488],
# ["URG-04LX/2013-09/", "2013-09-05-17-45-09", 23564],
# ["URG-04LX/2013-09/", "2013-09-05-18-29-07", 21084],
# ["URG-04LX/2013-09/", "2013-09-05-20-13-14", 5801],
# ["URG-04LX/2013-09/", "2013-09-05-20-29-05", 4609],
# ["URG-04LX/2013-09/", "2013-09-05-20-45-07", 9809],
# ["URG-04LX/2013-09/", "2013-09-05-21-06-53", 14125],
# ["URG-04LX/2013-09/", "2013-09-06-17-24-23", 9312],
# ["URG-04LX/2013-09/", "2013-09-06-17-47-35", 9069],
# ["URG-04LX/2013-09/", "2013-09-06-18-05-02", 1501],
# ["URG-04LX/2013-09/", "2013-09-06-20-17-38", 15222],
# ["URG-04LX/2013-09/", "2013-09-06-20-46-01", 39117],
# ["URG-04LX/2013-09/", "2013-09-06-22-11-06", 12232],
# ["URG-04LX/2013-09/", "2013-09-07-15-17-21", 58788],
# ["URG-04LX/2013-09/", "2013-09-07-18-29-46", 65300],
# ["URG-04LX/2013-09/", "2013-09-08-14-12-20", 60864],
# ["URG-04LX/2013-09/", "2013-09-08-18-14-06", 38247],
# ["URG-04LX/2013-09/", "2013-09-08-20-22-39", 27320],
# ["URG-04LX/2013-09/", "2013-09-09-15-06-04", 43317],
# ["URG-04LX/2013-09/", "2013-09-09-18-17-00", 8873],
# ["URG-04LX/2013-09/", "2013-09-09-18-31-44", 22019],
# ["URG-04LX/2013-09/", "2013-09-09-19-09-05", 41072],
# ["URG-04LX/2013-09/", "2013-09-16-21-06-13", 1282],
# ["URG-04LX/2013-09/", "2013-09-16-21-08-22", 883],
# ["URG-04LX/2013-09/", "2013-09-16-21-09-52", 12357],
# ["URG-04LX/2013-09/", "2013-09-18-22-15-23", 1463],
# ["URG-04LX/2013-09/", "2013-09-24-22-10-31", 3233],
# ["URG-04LX/2013-09/", "2013-09-24-22-15-54", 4832],
# 
# # 2013-10
# ["URG-04LX/2013-10/", "2013-10-01-17-12-39", 5900],
# ["URG-04LX/2013-10/", "2013-10-01-17-22-28", 1415],
# ["URG-04LX/2013-10/", "2013-10-01-17-24-51", 1247],
# ["URG-04LX/2013-10/", "2013-10-01-20-00-11", 7297],
# ["URG-04LX/2013-10/", "2013-10-03-16-22-35", 3746],
# ["URG-04LX/2013-10/", "2013-10-03-16-31-34", 6744],
# ["URG-04LX/2013-10/", "2013-10-03-16-46-38", 1693],
# ["URG-04LX/2013-10/", "2013-10-03-16-49-27", 25432],
# ["URG-04LX/2013-10/", "2013-10-03-22-57-53", 1812],
# ["URG-04LX/2013-10/", "2013-10-03-23-00-55", 8109],
# ["URG-04LX/2013-10/", "2013-10-03-23-14-24", 1050],
# ["URG-04LX/2013-10/", "2013-10-04-17-31-18", 2440],
# ["URG-04LX/2013-10/", "2013-10-04-17-38-56", 811],
# ["URG-04LX/2013-10/", "2013-10-04-17-40-18", 8793],
# ["URG-04LX/2013-10/", "2013-10-04-17-54-55", 1269],
# ["URG-04LX/2013-10/", "2013-10-04-19-50-11", 1642],
# ["URG-04LX/2013-10/", "2013-10-04-19-53-04", 4287],
# ["URG-04LX/2013-10/", "2013-10-04-23-02-48", 711],
# ["URG-04LX/2013-10/", "2013-10-04-23-04-18", 13407],
# ["URG-04LX/2013-10/", "2013-10-10-19-10-01", 13926],
# ["URG-04LX/2013-10/", "2013-10-10-19-34-37", 16830],
# ["URG-04LX/2013-10/", "2013-10-11-17-25-11", 5738],
# ["URG-04LX/2013-10/", "2013-10-11-17-53-34", 15064],
# ["URG-04LX/2013-10/", "2013-10-11-18-53-06", 11060],
# ["URG-04LX/2013-10/", "2013-10-11-19-18-47", 5848],
# ["URG-04LX/2013-10/", "2013-10-12-17-40-58", 14335],
# ["URG-04LX/2013-10/", "2013-10-14-17-32-00", 2227],
# ["URG-04LX/2013-10/", "2013-10-14-17-35-44", 3161],
# ["URG-04LX/2013-10/", "2013-10-14-17-41-23", 2515],
# ["URG-04LX/2013-10/", "2013-10-14-19-08-25", 11892],
# ["URG-04LX/2013-10/", "2013-10-14-19-28-19", 1463],
# ["URG-04LX/2013-10/", "2013-10-14-19-30-47", 13422],
# ["URG-04LX/2013-10/", "2013-10-14-20-04-31", 11397],
# ["URG-04LX/2013-10/", "2013-10-15-17-39-32", 22172],
# ["URG-04LX/2013-10/", "2013-10-15-18-16-50", 816],
# ["URG-04LX/2013-10/", "2013-10-15-18-19-33", 1662],
# ["URG-04LX/2013-10/", "2013-10-15-19-09-22", 20801],
# ["URG-04LX/2013-10/", "2013-10-16-19-38-16", 2749],
# ["URG-04LX/2013-10/", "2013-10-16-20-03-48", 7395],
# ["URG-04LX/2013-10/", "2013-10-16-20-35-30", 23044],
# ["URG-04LX/2013-10/", "2013-10-17-17-49-26", 19786],
# ["URG-04LX/2013-10/", "2013-10-17-18-53-56", 4590],
# ["URG-04LX/2013-10/", "2013-10-17-19-13-19", 9202],
# ["URG-04LX/2013-10/", "2013-10-17-22-16-42", 12899],
# ["URG-04LX/2013-10/", "2013-10-18-13-24-53", 6580],
# ["URG-04LX/2013-10/", "2013-10-18-13-35-49", 1616],
# ["URG-04LX/2013-10/", "2013-10-18-13-38-31", 1005],
# ["URG-04LX/2013-10/", "2013-10-18-13-40-13", 9648],
# ["URG-04LX/2013-10/", "2013-10-18-16-55-22", 14699],
# ["URG-04LX/2013-10/", "2013-10-18-18-03-42", 18714],
# ["URG-04LX/2013-10/", "2013-10-21-16-50-25", 17517],
# ["URG-04LX/2013-10/", "2013-10-21-17-44-33", 2454],
# ["URG-04LX/2013-10/", "2013-10-21-17-48-42", 1561],
# ["URG-04LX/2013-10/", "2013-10-21-17-51-20", 3593],
# ["URG-04LX/2013-10/", "2013-10-21-18-11-35", 18786],
# ["URG-04LX/2013-10/", "2013-10-22-18-07-38", 7569],
# ["URG-04LX/2013-10/", "2013-10-22-19-02-23", 25146],
# ["URG-04LX/2013-10/", "2013-10-23-15-42-03", 18737],
# ["URG-04LX/2013-10/", "2013-10-23-16-31-04", 16478],
# ["URG-04LX/2013-10/", "2013-10-23-19-11-38", 16654],
# ["URG-04LX/2013-10/", "2013-10-23-21-34-50", 18746],
# ["URG-04LX/2013-10/", "2013-10-24-19-03-48", 18736],
# ["URG-04LX/2013-10/", "2013-10-24-20-33-48", 22890],
# ["URG-04LX/2013-10/", "2013-10-25-19-09-03", 15835],
# ["URG-04LX/2013-10/", "2013-10-25-20-42-30", 15763],
# ["URG-04LX/2013-10/", "2013-10-25-21-20-52", 15860],
# ["URG-04LX/2013-10/", "2013-10-29-18-53-26", 1763],
# ["URG-04LX/2013-10/", "2013-10-30-15-28-30", 10560],
# ["URG-04LX/2013-10/", "2013-10-30-16-57-26", 4022],
# ["URG-04LX/2013-10/", "2013-10-30-19-35-43", 6722],
# ["URG-04LX/2013-10/", "2013-10-30-20-08-36", 13322],
# ["URG-04LX/2013-10/", "2013-10-30-20-35-31", 2994],
# ["URG-04LX/2013-10/", "2013-10-30-21-04-32", 1836],
# ["URG-04LX/2013-10/", "2013-10-30-23-38-06", 4305],
# ["URG-04LX/2013-10/", "2013-10-31-15-23-36", 25930],
# ["URG-04LX/2013-10/", "2013-10-31-16-29-40", 1973],
# ["URG-04LX/2013-10/", "2013-10-31-16-32-58", 8984],
# ["URG-04LX/2013-10/", "2013-10-31-17-56-53", 1618],
# ["URG-04LX/2013-10/", "2013-10-31-17-59-37", 35571],
# ["URG-04LX/2013-10/", "2013-10-31-19-40-30", 2762],
# ["URG-04LX/2013-10/", "2013-10-31-19-45-06", 21204],
# 
# # 2013-11
# ["URG-04LX/2013-11/", "2013-11-01-14-40-19", 20958],
# ["URG-04LX/2013-11/", "2013-11-01-15-51-59", 15031],
# ["URG-04LX/2013-11/", "2013-11-01-16-16-58", 1856],
# ["URG-04LX/2013-11/", "2013-11-01-16-20-05", 1478],
# ["URG-04LX/2013-11/", "2013-11-01-16-22-33", 10400],
# ["URG-04LX/2013-11/", "2013-11-04-21-20-12", 31779],
# ["URG-04LX/2013-11/", "2013-11-05-19-21-38", 20018],
# ["URG-04LX/2013-11/", "2013-11-06-20-31-57", 27507],
# ["URG-04LX/2013-11/", "2013-11-06-22-30-00", 5701],
# ["URG-04LX/2013-11/", "2013-11-06-22-44-44", 13062],
# ["URG-04LX/2013-11/", "2013-11-07-20-30-45", 1830],
# ["URG-04LX/2013-11/", "2013-11-07-20-33-47", 5297],
# ["URG-04LX/2013-11/", "2013-11-07-20-49-28", 13033],
# ["URG-04LX/2013-11/", "2013-11-07-21-14-16", 5740],
# ["URG-04LX/2013-11/", "2013-11-07-21-23-57", 2330],
# ["URG-04LX/2013-11/", "2013-11-07-21-27-50", 1889],
# ["URG-04LX/2013-11/", "2013-11-07-21-35-47", 7593],
# ["URG-04LX/2013-11/", "2013-11-08-19-54-24", 4250],
# ["URG-04LX/2013-11/", "2013-11-08-20-06-20", 4748],
# ["URG-04LX/2013-11/", "2013-11-08-20-14-15", 9182],
# ["URG-04LX/2013-11/", "2013-11-08-20-29-31", 5962],
# ["URG-04LX/2013-11/", "2013-11-08-20-39-26", 8876],
# ["URG-04LX/2013-11/", "2013-11-11-15-07-58", 1631],
# ["URG-04LX/2013-11/", "2013-11-11-15-10-42", 4866],
# ["URG-04LX/2013-11/", "2013-11-11-15-18-48", 9861],
# ["URG-04LX/2013-11/", "2013-11-11-15-35-13", 6368],
# ["URG-04LX/2013-11/", "2013-11-11-15-45-49", 10311],
# ["URG-04LX/2013-11/", "2013-11-11-16-59-42", 1709],
# ["URG-04LX/2013-11/", "2013-11-11-17-02-33", 5871],
# ["URG-04LX/2013-11/", "2013-11-11-19-06-16", 1518],
# ["URG-04LX/2013-11/", "2013-11-11-19-08-48", 5078],
# ["URG-04LX/2013-11/", "2013-11-11-19-17-16", 6850],
# ["URG-04LX/2013-11/", "2013-11-11-19-29-18", 3157],
# ["URG-04LX/2013-11/", "2013-11-11-19-47-57", 6017],
# ["URG-04LX/2013-11/", "2013-11-11-19-57-56", 9106],
# ["URG-04LX/2013-11/", "2013-11-11-22-20-34", 1339],
# ["URG-04LX/2013-11/", "2013-11-11-22-22-48", 4690],
# ["URG-04LX/2013-11/", "2013-11-11-22-30-37", 3054],
# ["URG-04LX/2013-11/", "2013-11-11-22-36-37", 6952],
# ["URG-04LX/2013-11/", "2013-11-11-22-48-12", 1480],
# ["URG-04LX/2013-11/", "2013-11-11-22-51-54", 987],
# ["URG-04LX/2013-11/", "2013-11-11-22-53-39", 1864],
# ["URG-04LX/2013-11/", "2013-11-11-22-56-47", 3668],
# ["URG-04LX/2013-11/", "2013-11-11-23-02-54", 9814],
# ["URG-04LX/2013-11/", "2013-11-11-23-45-31", 1548],
# ["URG-04LX/2013-11/", "2013-11-11-23-48-06", 4598],
# ["URG-04LX/2013-11/", "2013-11-11-23-59-15", 3909],
# ["URG-04LX/2013-11/", "2013-11-12-00-06-16", 3542],
# ["URG-04LX/2013-11/", "2013-11-12-00-12-10", 8208],
# ["URG-04LX/2013-11/", "2013-11-12-00-25-50", 6342],
# ["URG-04LX/2013-11/", "2013-11-12-00-36-23", 8070],
# ["URG-04LX/2013-11/", "2013-11-12-14-59-30", 1929],
# ["URG-04LX/2013-11/", "2013-11-12-15-02-43", 5862],
# ["URG-04LX/2013-11/", "2013-11-12-15-12-29", 9190],
# ["URG-04LX/2013-11/", "2013-11-12-15-27-45", 5180],
# ["URG-04LX/2013-11/", "2013-11-12-15-36-21", 12744],
# ["URG-04LX/2013-11/", "2013-11-12-19-06-13", 1753],
# ["URG-04LX/2013-11/", "2013-11-12-19-09-10", 5564],
# ["URG-04LX/2013-11/", "2013-11-12-19-18-26", 9674],
# ["URG-04LX/2013-11/", "2013-11-12-19-34-32", 4345],
# ["URG-04LX/2013-11/", "2013-11-12-19-41-54", 2123],
# ["URG-04LX/2013-11/", "2013-11-12-19-45-27", 8822],
# ["URG-04LX/2013-11/", "2013-11-12-23-28-58", 2108],
# ["URG-04LX/2013-11/", "2013-11-12-23-32-30", 5442],
# ["URG-04LX/2013-11/", "2013-11-12-23-41-35", 9859],
# ["URG-04LX/2013-11/", "2013-11-12-23-57-59", 6745],
# ["URG-04LX/2013-11/", "2013-11-13-00-09-11", 7674],
# ["URG-04LX/2013-11/", "2013-11-13-20-32-20", 9582],
# ["URG-04LX/2013-11/", "2013-11-13-20-54-40", 726],
# ["URG-04LX/2013-11/", "2013-11-13-20-57-14", 7188],
# ["URG-04LX/2013-11/", "2013-11-13-21-21-12", 785],
# ["URG-04LX/2013-11/", "2013-11-13-21-22-38", 598],
# ["URG-04LX/2013-11/", "2013-11-13-21-28-46", 3504],
# ["URG-04LX/2013-11/", "2013-11-13-21-35-53", 997],
# ["URG-04LX/2013-11/", "2013-11-13-21-37-51", 844],
# ["URG-04LX/2013-11/", "2013-11-13-21-39-48", 2602],
# ["URG-04LX/2013-11/", "2013-11-13-21-49-59", 721],
# ["URG-04LX/2013-11/", "2013-11-13-21-51-24", 573],
# ["URG-04LX/2013-11/", "2013-11-13-21-53-28", 2258],
# ["URG-04LX/2013-11/", "2013-11-13-21-58-31", 858],
# ["URG-04LX/2013-11/", "2013-11-13-22-02-28", 1652],
# ["URG-04LX/2013-11/", "2013-11-13-22-07-31", 2069],
# ["URG-04LX/2013-11/", "2013-11-14-16-26-14", 614],
# ["URG-04LX/2013-11/", "2013-11-14-16-27-19", 661],
# ["URG-04LX/2013-11/", "2013-11-14-16-28-25", 1701],
# ["URG-04LX/2013-11/", "2013-11-14-16-33-32", 1266],
# ["URG-04LX/2013-11/", "2013-11-14-16-35-55", 975],
# ["URG-04LX/2013-11/", "2013-11-14-16-37-59", 3974],
# ["URG-04LX/2013-11/", "2013-11-14-16-46-59", 3398],
# ["URG-04LX/2013-11/", "2013-11-14-16-53-06", 23997],
# ["URG-04LX/2013-11/", "2013-11-14-17-55-04", 6288],
# ["URG-04LX/2013-11/", "2013-11-14-18-05-43", 5691],
# ["URG-04LX/2013-11/", "2013-11-14-19-45-05", 5576],
# ["URG-04LX/2013-11/", "2013-11-14-20-01-18", 7888],
# ["URG-04LX/2013-11/", "2013-11-14-20-14-26", 11074],
# ["URG-04LX/2013-11/", "2013-11-14-20-32-51", 3319],
# ["URG-04LX/2013-11/", "2013-11-14-20-38-30", 2230],
# ["URG-04LX/2013-11/", "2013-11-15-15-31-11", 4703],
# ["URG-04LX/2013-11/", "2013-11-15-15-39-00", 6209],
# ["URG-04LX/2013-11/", "2013-11-15-15-49-21", 1290],
# ["URG-04LX/2013-11/", "2013-11-15-19-10-27", 1449],
# ["URG-04LX/2013-11/", "2013-11-15-19-12-53", 4724],
# ["URG-04LX/2013-11/", "2013-11-15-19-21-04", 1242],
# ["URG-04LX/2013-11/", "2013-11-15-19-38-55", 4261],
# ["URG-04LX/2013-11/", "2013-11-15-19-52-49", 13580],
# ["URG-04LX/2013-11/", "2013-11-15-21-34-00", 13745],
# ["URG-04LX/2013-11/", "2013-11-15-21-56-50", 3532],
# ["URG-04LX/2013-11/", "2013-11-15-22-15-13", 11334],
# ["URG-04LX/2013-11/", "2013-11-15-22-41-29", 9727],
# ["URG-04LX/2013-11/", "2013-11-15-23-02-54", 5472],
# ["URG-04LX/2013-11/", "2013-11-15-23-12-00", 3611],
# ["URG-04LX/2013-11/", "2013-11-18-15-13-06", 1378],
# ["URG-04LX/2013-11/", "2013-11-18-15-15-26", 5055],
# ["URG-04LX/2013-11/", "2013-11-18-15-23-51", 690],
# ["URG-04LX/2013-11/", "2013-11-18-15-36-25", 7788],
# ["URG-04LX/2013-11/", "2013-11-18-15-49-23", 5972],
# ["URG-04LX/2013-11/", "2013-11-18-15-59-19", 7884],
# ["URG-04LX/2013-11/", "2013-11-18-17-45-34", 1793],
# ["URG-04LX/2013-11/", "2013-11-18-17-49-08", 2196],
# ["URG-04LX/2013-11/", "2013-11-18-17-53-32", 1231],
# ["URG-04LX/2013-11/", "2013-11-18-17-55-36", 3233],
# ["URG-04LX/2013-11/", "2013-11-18-18-01-00", 8483],
# ["URG-04LX/2013-11/", "2013-11-18-18-15-07", 6964],
# ["URG-04LX/2013-11/", "2013-11-18-18-26-43", 10750],
# ["URG-04LX/2013-11/", "2013-11-18-19-41-43", 3530],
# ["URG-04LX/2013-11/", "2013-11-18-19-52-30", 8144],
# ["URG-04LX/2013-11/", "2013-11-18-20-06-04", 9820],
# ["URG-04LX/2013-11/", "2013-11-18-20-22-24", 5475],
# ["URG-04LX/2013-11/", "2013-11-18-20-31-30", 7835],
# ["URG-04LX/2013-11/", "2013-11-18-22-18-10", 1851],
# ["URG-04LX/2013-11/", "2013-11-18-22-21-16", 7127],
# ["URG-04LX/2013-11/", "2013-11-18-22-33-08", 10579],
# ["URG-04LX/2013-11/", "2013-11-18-22-50-44", 4957],
# ["URG-04LX/2013-11/", "2013-11-18-22-58-59", 12538],
# ["URG-04LX/2013-11/", "2013-11-18-23-19-50", 6010],
# ["URG-04LX/2013-11/", "2013-11-18-23-29-50", 9052],
# ["URG-04LX/2013-11/", "2013-11-19-15-31-12", 2107],
# ["URG-04LX/2013-11/", "2013-11-19-15-34-44", 5006],
# ["URG-04LX/2013-11/", "2013-11-19-15-43-05", 8919],
# ["URG-04LX/2013-11/", "2013-11-19-15-57-55", 8149],
# ["URG-04LX/2013-11/", "2013-11-19-16-11-27", 8501],
# ["URG-04LX/2013-11/", "2013-11-19-19-50-06", 1722],
# ["URG-04LX/2013-11/", "2013-11-19-19-52-59", 6202],
# ["URG-04LX/2013-11/", "2013-11-19-20-03-19", 8074],
# ["URG-04LX/2013-11/", "2013-11-19-20-16-44", 5376],
# ["URG-04LX/2013-11/", "2013-11-19-20-25-41", 17919],
# ["URG-04LX/2013-11/", "2013-11-20-15-48-55", 1620],
# ["URG-04LX/2013-11/", "2013-11-20-15-51-38", 4222],
# ["URG-04LX/2013-11/", "2013-11-20-15-58-41", 497],
# ["URG-04LX/2013-11/", "2013-11-20-16-02-53", 9909],
# ["URG-04LX/2013-11/", "2013-11-20-16-19-22", 6390],
# ["URG-04LX/2013-11/", "2013-11-20-16-30-00", 8770],
# ["URG-04LX/2013-11/", "2013-11-20-20-50-41", 2400],
# ["URG-04LX/2013-11/", "2013-11-20-20-54-41", 5330],
# ["URG-04LX/2013-11/", "2013-11-20-21-03-34", 15501],
# ["URG-04LX/2013-11/", "2013-11-20-21-30-14", 5330],
# ["URG-04LX/2013-11/", "2013-11-20-21-39-31", 14684],
# ["URG-04LX/2013-11/", "2013-11-21-18-45-37", 1475],
# ["URG-04LX/2013-11/", "2013-11-21-18-48-05", 1619],
# ["URG-04LX/2013-11/", "2013-11-21-18-50-47", 5668],
# ["URG-04LX/2013-11/", "2013-11-21-19-00-13", 8333],
# ["URG-04LX/2013-11/", "2013-11-21-19-14-05", 5981],
# ["URG-04LX/2013-11/", "2013-11-21-19-24-01", 8517],
# ["URG-04LX/2013-11/", "2013-11-22-16-00-26", 1348],
# ["URG-04LX/2013-11/", "2013-11-22-16-02-43", 4780],
# ["URG-04LX/2013-11/", "2013-11-22-16-10-42", 7457],
# ["URG-04LX/2013-11/", "2013-11-22-16-23-06", 10103],
# ["URG-04LX/2013-11/", "2013-11-22-16-39-53", 8133],
# ["URG-04LX/2013-11/", "2013-11-22-19-14-08", 2268],
# ["URG-04LX/2013-11/", "2013-11-22-19-17-55", 4843],
# ["URG-04LX/2013-11/", "2013-11-22-19-25-59", 8321],
# ["URG-04LX/2013-11/", "2013-11-22-19-39-50", 6338],
# ["URG-04LX/2013-11/", "2013-11-22-19-50-23", 6055],
# ["URG-04LX/2013-11/", "2013-11-22-23-31-47", 1377],
# ["URG-04LX/2013-11/", "2013-11-22-23-34-06", 5041],
# ["URG-04LX/2013-11/", "2013-11-22-23-42-30", 10215],
# ["URG-04LX/2013-11/", "2013-11-22-23-59-30", 6273],
# ["URG-04LX/2013-11/", "2013-11-23-00-09-55", 8808],
# ["URG-04LX/2013-11/", "2013-11-25-15-24-22", 1710],
# ["URG-04LX/2013-11/", "2013-11-25-15-27-13", 543],
# ["URG-04LX/2013-11/", "2013-11-25-15-34-21", 5256],
# ["URG-04LX/2013-11/", "2013-11-25-15-49-26", 8692],
# ["URG-04LX/2013-11/", "2013-11-25-16-03-54", 5404],
# ["URG-04LX/2013-11/", "2013-11-25-16-12-53", 7877],
# ["URG-04LX/2013-11/", "2013-11-25-19-55-15", 1681],
# ["URG-04LX/2013-11/", "2013-11-25-19-58-03", 983],
# ["URG-04LX/2013-11/", "2013-11-25-20-12-11", 7253],
# ["URG-04LX/2013-11/", "2013-11-25-20-28-04", 15124],
# ["URG-04LX/2013-11/", "2013-11-25-20-53-12", 6005],
# ["URG-04LX/2013-11/", "2013-11-25-21-03-12", 11330],
# ["URG-04LX/2013-11/", "2013-11-25-23-35-41", 1745],
# ["URG-04LX/2013-11/", "2013-11-25-23-38-38", 971],
# ["URG-04LX/2013-11/", "2013-11-25-23-46-52", 3698],
# ["URG-04LX/2013-11/", "2013-11-25-23-53-02", 9257],
# ["URG-04LX/2013-11/", "2013-11-26-00-08-26", 5846],
# ["URG-04LX/2013-11/", "2013-11-26-00-18-10", 11137],
# ["URG-04LX/2013-11/", "2013-11-26-15-14-48", 2092],
# ["URG-04LX/2013-11/", "2013-11-26-15-18-17", 4928],
# ["URG-04LX/2013-11/", "2013-11-26-15-26-30", 9616],
# ["URG-04LX/2013-11/", "2013-11-26-15-42-30", 3519],
# ["URG-04LX/2013-11/", "2013-11-26-15-48-49", 2615],
# ["URG-04LX/2013-11/", "2013-11-26-15-53-10", 8323],
# ["URG-04LX/2013-11/", "2013-11-26-19-08-00", 2239],
# ["URG-04LX/2013-11/", "2013-11-26-19-18-36", 4408],
# ["URG-04LX/2013-11/", "2013-11-26-19-25-58", 14835],
# ["URG-04LX/2013-11/", "2013-11-26-19-50-37", 5181],
# ["URG-04LX/2013-11/", "2013-11-26-19-59-14", 7992],
# ["URG-04LX/2013-11/", "2013-11-26-22-39-48", 1602],
# ["URG-04LX/2013-11/", "2013-11-26-22-42-28", 4203],
# ["URG-04LX/2013-11/", "2013-11-26-22-49-29", 9583],
# ["URG-04LX/2013-11/", "2013-11-26-23-05-26", 5914],
# ["URG-04LX/2013-11/", "2013-11-26-23-16-12", 11930],
# ["URG-04LX/2013-11/", "2013-11-27-15-35-42", 1520],
# ["URG-04LX/2013-11/", "2013-11-27-15-38-14", 4397],
# ["URG-04LX/2013-11/", "2013-11-27-15-45-34", 12903],
# ["URG-04LX/2013-11/", "2013-11-27-16-07-01", 5362],
# ["URG-04LX/2013-11/", "2013-11-27-16-15-56", 7730],
# ["URG-04LX/2013-11/", "2013-11-27-19-06-15", 3822],
# ["URG-04LX/2013-11/", "2013-11-27-19-12-36", 4122],
# ["URG-04LX/2013-11/", "2013-11-27-19-19-29", 7302],
# ["URG-04LX/2013-11/", "2013-11-27-19-31-38", 4620],
# ["URG-04LX/2013-11/", "2013-11-27-19-39-19", 7981],
# ["URG-04LX/2013-11/", "2013-11-27-22-14-46", 1516],
# ["URG-04LX/2013-11/", "2013-11-27-22-17-18", 4580],
# ["URG-04LX/2013-11/", "2013-11-27-22-24-57", 8052],
# ["URG-04LX/2013-11/", "2013-11-27-22-38-21", 4931],
# ["URG-04LX/2013-11/", "2013-11-27-22-46-34", 7668],
# ["URG-04LX/2013-11/", "2013-11-28-15-10-18", 1523],
# ["URG-04LX/2013-11/", "2013-11-28-15-12-51", 4156],
# ["URG-04LX/2013-11/", "2013-11-28-15-19-47", 7073],
# ["URG-04LX/2013-11/", "2013-11-28-15-31-33", 4731],
# ["URG-04LX/2013-11/", "2013-11-28-15-39-26", 8518],
# ["URG-04LX/2013-11/", "2013-11-28-19-06-41", 1389],
# ["URG-04LX/2013-11/", "2013-11-28-19-09-00", 4347],
# ["URG-04LX/2013-11/", "2013-11-28-19-16-15", 7791],
# ["URG-04LX/2013-11/", "2013-11-28-19-29-13", 4723],
# ["URG-04LX/2013-11/", "2013-11-28-19-37-04", 7995],
# ["URG-04LX/2013-11/", "2013-11-28-22-11-03", 1371],
# ["URG-04LX/2013-11/", "2013-11-28-22-13-20", 6449],
# ["URG-04LX/2013-11/", "2013-11-28-22-24-04", 7731],
# ["URG-04LX/2013-11/", "2013-11-28-22-36-56", 4721],
# ["URG-04LX/2013-11/", "2013-11-28-22-44-47", 7626],
# ["URG-04LX/2013-11/", "2013-11-29-15-12-55", 2789],
# ["URG-04LX/2013-11/", "2013-11-29-15-17-33", 610],
# ["URG-04LX/2013-11/", "2013-11-29-15-28-05", 4013],
# ["URG-04LX/2013-11/", "2013-11-29-15-34-47", 557],
# ["URG-04LX/2013-11/", "2013-11-29-15-41-25", 6703],
# ["URG-04LX/2013-11/", "2013-11-29-15-53-05", 1015],
# ["URG-04LX/2013-11/", "2013-11-29-15-54-48", 6843],
# ["URG-04LX/2013-11/", "2013-11-29-16-06-10", 9254],
# ["URG-04LX/2013-11/", "2013-11-29-19-10-40", 1551],
# ["URG-04LX/2013-11/", "2013-11-29-19-13-15", 4270],
# ["URG-04LX/2013-11/", "2013-11-29-19-20-23", 7325],
# ["URG-04LX/2013-11/", "2013-11-29-19-32-34", 4739],
# ["URG-04LX/2013-11/", "2013-11-29-19-40-28", 7654],
# ["URG-04LX/2013-11/", "2013-11-29-21-18-01", 1715],
# ["URG-04LX/2013-11/", "2013-11-29-21-20-52", 4406],
# ["URG-04LX/2013-11/", "2013-11-29-21-28-13", 7485],
# ["URG-04LX/2013-11/", "2013-11-29-21-40-41", 4696],
# ["URG-04LX/2013-11/", "2013-11-29-21-48-30", 10625],
# 
# # 2013-12
# ["URG-04LX/2013-12/", "2013-12-02-18-34-16", 1829],
# ["URG-04LX/2013-12/", "2013-12-02-18-37-19", 4518],
# ["URG-04LX/2013-12/", "2013-12-02-18-44-51", 9103],
# ["URG-04LX/2013-12/", "2013-12-02-19-00-00", 7239],
# ["URG-04LX/2013-12/", "2013-12-02-19-12-01", 8664],
# ["URG-04LX/2013-12/", "2013-12-02-21-18-01", 2792],
# ["URG-04LX/2013-12/", "2013-12-02-21-22-41", 5201],
# ["URG-04LX/2013-12/", "2013-12-02-21-31-21", 7837],
# ["URG-04LX/2013-12/", "2013-12-02-21-44-23", 6010],
# ["URG-04LX/2013-12/", "2013-12-02-21-54-22", 5082],
# ["URG-04LX/2013-12/", "2013-12-02-22-08-32", 6919],
# ["URG-04LX/2013-12/", "2013-12-03-15-21-13", 2083],
# ["URG-04LX/2013-12/", "2013-12-03-15-24-41", 4827],
# ["URG-04LX/2013-12/", "2013-12-03-15-32-44", 8861],
# ["URG-04LX/2013-12/", "2013-12-03-15-47-28", 8480],
# ["URG-04LX/2013-12/", "2013-12-03-16-01-34", 8450],
# ["URG-04LX/2013-12/", "2013-12-03-20-39-51", 1504],
# ["URG-04LX/2013-12/", "2013-12-03-20-42-23", 4468],
# ["URG-04LX/2013-12/", "2013-12-03-20-49-49", 3472],
# ["URG-04LX/2013-12/", "2013-12-03-20-55-40", 9810],
# ["URG-04LX/2013-12/", "2013-12-03-21-11-59", 6052],
# ["URG-04LX/2013-12/", "2013-12-03-21-27-28", 8198],
# ["URG-04LX/2013-12/", "2013-12-04-14-55-23", 1509],
# ["URG-04LX/2013-12/", "2013-12-04-14-57-54", 4385],
# ["URG-04LX/2013-12/", "2013-12-04-15-05-16", 7725],
# ["URG-04LX/2013-12/", "2013-12-04-15-18-07", 6540],
# ["URG-04LX/2013-12/", "2013-12-04-15-29-00", 7683],
# ["URG-04LX/2013-12/", "2013-12-04-18-20-31", 3212],
# ["URG-04LX/2013-12/", "2013-12-04-18-30-51", 5351],
# ["URG-04LX/2013-12/", "2013-12-04-19-14-18", 3085],
# ["URG-04LX/2013-12/", "2013-12-04-19-19-26", 4895],
# ["URG-04LX/2013-12/", "2013-12-04-19-27-36", 9678],
# ["URG-04LX/2013-12/", "2013-12-04-19-43-42", 5687],
# ["URG-04LX/2013-12/", "2013-12-04-19-53-10", 10567],
# ["URG-04LX/2013-12/", "2013-12-04-22-10-17", 2768],
# ["URG-04LX/2013-12/", "2013-12-04-22-14-55", 4421],
# ["URG-04LX/2013-12/", "2013-12-04-22-22-18", 8169],
# ["URG-04LX/2013-12/", "2013-12-04-22-35-53", 5418],
# ["URG-04LX/2013-12/", "2013-12-04-22-45-01", 9951],
# ["URG-04LX/2013-12/", "2013-12-05-14-19-03", 1081],
# ["URG-04LX/2013-12/", "2013-12-05-15-09-52", 1654],
# ["URG-04LX/2013-12/", "2013-12-05-15-12-37", 8282],
# ["URG-04LX/2013-12/", "2013-12-05-15-32-31", 1458],
# ["URG-04LX/2013-12/", "2013-12-05-15-34-58", 4285],
# ["URG-04LX/2013-12/", "2013-12-05-15-42-07", 8304],
# ["URG-04LX/2013-12/", "2013-12-05-15-55-56", 5036],
# ["URG-04LX/2013-12/", "2013-12-05-16-04-19", 11766],
# ["URG-04LX/2013-12/", "2013-12-05-19-09-15", 1348],
# ["URG-04LX/2013-12/", "2013-12-05-19-11-30", 4944],
# ["URG-04LX/2013-12/", "2013-12-05-19-19-45", 8008],
# ["URG-04LX/2013-12/", "2013-12-05-19-33-02", 3360],
# ["URG-04LX/2013-12/", "2013-12-05-19-38-39", 4692],
# ["URG-04LX/2013-12/", "2013-12-05-19-46-28", 9964],
# ["URG-04LX/2013-12/", "2013-12-05-21-10-02", 2505],
# ["URG-04LX/2013-12/", "2013-12-05-21-14-15", 5256],
# ["URG-04LX/2013-12/", "2013-12-05-21-23-01", 9604],
# ["URG-04LX/2013-12/", "2013-12-05-21-38-59", 5131],
# ["URG-04LX/2013-12/", "2013-12-05-21-47-32", 7705],
# ["URG-04LX/2013-12/", "2013-12-06-15-05-16", 1647],
# ["URG-04LX/2013-12/", "2013-12-06-15-08-02", 5381],
# ["URG-04LX/2013-12/", "2013-12-06-15-17-01", 19327],
# ["URG-04LX/2013-12/", "2013-12-06-15-49-08", 8462],
# ["URG-04LX/2013-12/", "2013-12-06-16-03-13", 7733],
# ["URG-04LX/2013-12/", "2013-12-06-19-15-11", 2782],
# ["URG-04LX/2013-12/", "2013-12-06-19-19-50", 4732],
# ["URG-04LX/2013-12/", "2013-12-06-19-27-43", 1432],
# ["URG-04LX/2013-12/", "2013-12-06-19-30-06", 1487],
# ["URG-04LX/2013-12/", "2013-12-06-19-32-36", 8315],
# ["URG-04LX/2013-12/", "2013-12-06-19-46-26", 6109],
# ["URG-04LX/2013-12/", "2013-12-06-19-56-36", 10216],
# ["URG-04LX/2013-12/", "2013-12-06-21-01-50", 1446],
# ["URG-04LX/2013-12/", "2013-12-10-16-05-17", 2806],
# ["URG-04LX/2013-12/", "2013-12-10-16-38-31", 4733],
# ["URG-04LX/2013-12/", "2013-12-10-20-20-15", 36942],
# ["URG-04LX/2013-12/", "2013-12-10-21-40-07", 3324],
# ["URG-04LX/2013-12/", "2013-12-10-21-46-36", 3010],
# ["URG-04LX/2013-12/", "2013-12-11-19-55-44", 22339],
# ["URG-04LX/2013-12/", "2013-12-16-17-50-41", 15892],
# ["URG-04LX/2013-12/", "2013-12-17-17-26-38", 3404],
# ["URG-04LX/2013-12/", "2013-12-17-17-34-41", 1274],




class LaserDatasetOLD(Dataset):
  """Laser dataset."""

  def __init__(self, root_dir, bag_dates_scan_lengths, transform=None):
      """
      Args:
          bag_dates... ((N, 3) array): Parent dirs, dates, and scan lengths.
          root_dir (string): Directory with all the images.
          transform (callable, optional): Optional transform to be applied
              on a sample.
      """
      self.root_dir = root_dir
      self.transform = transform
      self.record = bag_dates_scan_lengths
      total_scans = 0
      for i in range(len(bag_dates_scan_lengths)):
        #print(bag_dates_scan_lengths[i][0]+bag_dates_scan_lengths[i][1])
        total_scans = total_scans + bag_dates_scan_lengths[i][2]

      self.size = total_scans

  def PNGtoNPA(self, file_name):
    im = cv2.imread(file_name)
    return im
  
  def __len__(self):
    return self.size

  def __getitem__(self, idx):
    file_a_base = ""
    file_aprime_base = ""
    file_b_base = ""
    file_a_mid = ""
    file_aprime_mid = ""
    file_b_mid = ""

    #window_size = 1
    #window_size = 5
    window_size = 20

    a_idx = idx + 1 # idx is zero indexed and files are 1 indexed
    aprime_idx = 0
    b_idx = 0
    prev_seen = 0
    seen = 0
    record_idx = 0
    done = False
    while not done:
      #print(prev_seen)
      seen = seen + self.record[record_idx][2]
      #print(seen)
      #print(a_idx)
      if seen >= (a_idx + window_size) and (a_idx - window_size) > prev_seen:
        aprime_offset = random.randint(-window_size, window_size)
        if aprime_offset == 0:
          aprime_offset = 1
        aprime_idx = a_idx + aprime_offset
        done = True
      elif seen >= a_idx and seen < (a_idx + window_size):
        aprime_offset = random.randint(-window_size, -1)
        aprime_idx = a_idx + aprime_offset
        done = True
      elif seen > a_idx and (a_idx - window_size) <= prev_seen:
        aprime_offset = random.randint(1, window_size)
        aprime_idx = a_idx + aprime_offset
        done = True
      else:
        record_idx = record_idx + 1

      if done:
        #print(aprime_idx)
        inner_addr = a_idx - prev_seen
        inner_addr_prime = aprime_idx - prev_seen
        #file_a_base = self.root_dir+self.record[record_idx][0]+self.record[record_idx][1]+"/"
        #file_a_mid = self.record[record_idx][1]+"_"+str(inner_addr)+"_"
        #file_aprime_base = self.root_dir+self.record[record_idx][0]+self.record[record_idx][1]+"/"
        #file_aprime_mid = self.record[record_idx][1]+"_"+str(inner_addr_prime)+"_"
        file_a_base = self.root_dir+self.record[record_idx][0]+self.record[record_idx][1]+"/"
        file_a_mid = self.record[record_idx][1]+"_"+str(inner_addr)
        file_aprime_base = self.root_dir+self.record[record_idx][0]+self.record[record_idx][1]+"/"
        file_aprime_mid = self.record[record_idx][1]+"_"+str(inner_addr_prime)

      prev_seen = seen

    valid_b = False
    while not valid_b:
      b_idx = random.randint(1, self.size)
      if abs(b_idx - a_idx) > window_size:
        valid_b = True

    prev_seen = 0
    seen = 0
    record_idx = 0
    done = False
    while not done:
      seen = seen + self.record[record_idx][2]
      if seen >= b_idx:
        done = True
      else:
        record_idx = record_idx + 1

      if done:
        inner_addr = b_idx - prev_seen
        #file_b_base = self.root_dir+self.record[record_idx][0]+self.record[record_idx][1]+"/"
        #file_b_mid = self.record[record_idx][1]+"_"+str(inner_addr)+"_"
        file_b_base = self.root_dir+self.record[record_idx][0]+self.record[record_idx][1]+"/"
        file_b_mid = self.record[record_idx][1]+"_"+str(inner_addr)

      prev_seen = seen

    #sample_a_norm = self.PNGtoNPA(file_a_base+file_a_mid+"norm.png")
    #sample_aprime_norm = self.PNGtoNPA(file_aprime_base+file_aprime_mid+"norm.png")
    #sample_b_norm = self.PNGtoNPA(file_b_base+file_b_mid+"norm.png")
    #sample_a_rot = self.PNGtoNPA(file_a_base+file_a_mid+"rot.png")
    #sample_aprime_rot = self.PNGtoNPA(file_aprime_base+file_aprime_mid+"rot.png")
    #sample_b_rot = self.PNGtoNPA(file_b_base+file_b_mid+"rot.png")
    sample_a_norm = self.PNGtoNPA(file_a_base+file_a_mid+".png")
    sample_aprime_norm = self.PNGtoNPA(file_aprime_base+file_aprime_mid+".png")
    sample_b_norm = self.PNGtoNPA(file_b_base+file_b_mid+".png")
    sample_a_rot = self.PNGtoNPA(file_a_base+file_a_mid+".png")
    sample_aprime_rot = self.PNGtoNPA(file_aprime_base+file_aprime_mid+".png")
    sample_b_rot = self.PNGtoNPA(file_b_base+file_b_mid+".png")
    if self.transform:
      sample_a_norm = self.transform(sample_a_norm)
      sample_aprime_norm = self.transform(sample_aprime_norm)
      sample_b_norm = self.transform(sample_b_norm)
      sample_a_rot = self.transform(sample_a_rot)
      sample_aprime_rot = self.transform(sample_aprime_rot)
      sample_b_rot = self.transform(sample_b_rot)

    sample_a_norm = sample_a_norm[0, :, :]
    sample_a_norm = sample_a_norm.unsqueeze(0)
    sample_aprime_norm = sample_aprime_norm[0, :, :]
    sample_aprime_norm = sample_aprime_norm.unsqueeze(0)
    sample_b_norm = sample_b_norm[0, :, :]
    sample_b_norm = sample_b_norm.unsqueeze(0)

    sample_a_rot = sample_a_rot[0, :, :]
    sample_a_rot = sample_a_rot.unsqueeze(0)
    sample_aprime_rot = sample_aprime_rot[0, :, :]
    sample_aprime_rot = sample_aprime_rot.unsqueeze(0)
    sample_b_rot = sample_b_rot[0, :, :]
    sample_b_rot = sample_b_rot.unsqueeze(0)

    label = np.array([0])
    return sample_a_norm, sample_aprime_norm, sample_b_norm, sample_a_rot, sample_aprime_rot, sample_b_rot, label


#TODO: rewrite for new data base structure
  def getSpecificItem(self, idx):
    idx = idx + 1
    prev_seen = 0
    seen = 0
    record_idx = 0
    done = False
    while not done:
      seen = seen + self.record[record_idx][2]
      if seen >= idx:
        done = True
      else:
        record_idx = record_idx + 1

      if done:
        inner_addr = idx - prev_seen
        #file_base = self.root_dir + self.record[record_idx][0] + self.record[record_idx][1] + "/"
        #file_mid = self.record[record_idx][1] + "_" + str(inner_addr) + "_"
        file_base = self.root_dir + self.record[record_idx][0] + self.record[record_idx][1] + "/"
        file_mid = self.record[record_idx][1] + "_" + str(inner_addr)

      prev_seen = seen

    #print(file_base + file_mid + "norm.png")
    #print(file_base + file_mid)

    #sample_norm = self.PNGtoNPA(file_base + file_mid + "norm.png")
    #sample_rot = self.PNGtoNPA(file_base + file_mid + "rot.png")
    sample_norm = self.PNGtoNPA(file_base + file_mid + ".png")
    sample_rot = self.PNGtoNPA(file_base + file_mid + ".png")
    if self.transform:
      sample_norm = self.transform(sample_norm)
      sample_rot = self.transform(sample_rot)

    #TODO: figure out why the unsqueeze is needed sometimes and not others

    sample_norm = sample_norm[0, :, :]
    sample_norm = sample_norm.unsqueeze(0)
    #sample_norm = sample_norm.unsqueeze(0)

    sample_rot = sample_rot[0, :, :]
    sample_rot = sample_rot.unsqueeze(0)
    #sample_rot = sample_rot.unsqueeze(0)

    return sample_norm, sample_rot

#TODO: rewrite for new data base structure
  def getAddress(self, idx):
    return self.record[idx]

def LoadScansFromText(filename):
  all_scans = []
  reader = csv.reader(open(filename), delimiter=" ")
  for line in reader:
    del line[-1]
    x = np.array(line)
    scan = x.astype(np.float)
    all_scans.append(scan)
    if len(all_scans) % 500 == 0: 
      print(len(all_scans))
  return all_scans

def CurateTrainTestOLD():

  to_tensor = transforms.ToTensor()
  normalize = transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
  transform = transforms.Compose([to_tensor, normalize])

  #bdsl_train = [["UST-10LX/", "2016-04-17-20-32-59", 2723],
  #              ["UST-10LX/", "2016-04-17-20-34-16", 2332],
  #              ["UST-10LX/", "2016-08-17-13-08-32", 2649],
  #              ["UST-10LX/", "2016-08-17-13-16-56", 2832],
  #              ["UST-10LX/", "2016-08-17-13-18-08", 3283]]

  #bdsl_train = [["UST-10LX_Natural/", "2016-04-17-20-32-59", 2723]]
  bdsl_train = [["UST-10LX/", "2016-04-17-20-32-59", 2723]]

#  bdsl_train = [["UST-10LX_Natural/", "2016-04-17-20-32-59", 2723]]
#                ["UST-10LX_Natural/", "2016-04-17-20-34-16", 2332],
#                ["UST-10LX_Natural/", "2016-08-17-13-08-32", 2649],
#                ["UST-10LX_Natural/", "2016-08-17-13-16-56", 2832]]
#                ["UST-10LX_Natural/", "2016-08-17-13-18-08", 3283]]


  #bdsl_train = [["UST-10LX/", "2016-04-17-20-32-59", 2723],
  #              ["UST-10LX/", "2016-08-17-13-16-56", 2832]]
  
  #bdsl_train = [["UST-10LX/", "2016-04-17-20-32-59", 2723]]

#  bdsl_train = [["UST-10LX/", "2016-08-17-12-48-06", 403], 
#                ["UST-10LX/", "2016-08-17-12-56-32", 544], 
#                ["UST-10LX/", "2016-08-17-12-57-16", 835],
#                ["UST-10LX/", "2016-08-17-12-57-54", 672],
#                ["UST-10LX/", "2016-08-17-12-58-32", 1191],
#                ["UST-10LX/", "2016-04-17-20-32-59", 2723],
#                ["UST-10LX/", "2016-04-17-20-34-16", 2332],
#                ["UST-10LX/", "2016-08-17-13-08-32", 2649],
#                ["UST-10LX/", "2016-08-17-13-16-56", 2832],
#                ["UST-10LX/", "2016-08-17-13-18-08", 3283],
#                ["UST-10LX/", "2016-02-16-15-46-43", 8971],
#                ["UST-10LX/", "2016-02-16-16-01-46", 9799],
#                ["UST-10LX/", "2016-02-16-16-17-06", 7251],
#                ["UST-10LX/", "2016-02-16-21-18-05", 6498],
#                ["UST-10LX/", "2016-02-16-21-20-53", 9099],
#                ["UST-10LX/", "2016-08-17-22-05-52", 67149]]



  #laser_dataset_train = LaserDataset('../../laser_images/full_normalized/', bdsl_train, transform=transform)
  laser_dataset_train = LaserDataset('../../laser_images/cartesian/', bdsl_train, transform=transform)

  #TODO: better way to differentiate training and testing sets
  #bdsl_test = [["UST-10LX/", "2016-08-17-13-18-08", 3283]]
  bdsl_test = [["UST-10LX_Natural/", "2016-08-17-13-18-08", 3283]]
  #bdsl_test = [["UST-10LX_Natural/", "2016-08-17-13-18-08", 256]]
  #bdsl_test = [["UST-10LX_Natural/", "2016-08-17-13-18-08", 64]]
  #bdsl_test = [["UST-10LX/", "2016-08-17-13-18-08", 70]]

  laser_dataset_test = LaserDataset('../../laser_images/full_normalized/', bdsl_test, transform=transform)

  print("Training dataset size: ")
  print(len(laser_dataset_train))

  #train_loader = torch.utils.data.DataLoader(laser_dataset_train, batch_size=16, shuffle=True)
  #test_loader = torch.utils.data.DataLoader(laser_dataset_test, batch_size=4, shuffle=False)

  #return train_loader, test_loader
  return laser_dataset_train, laser_dataset_test

def SpecialQuerySet():
  to_tensor = transforms.ToTensor()
  normalize = transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
  transform = transforms.Compose([to_tensor, normalize])

  #bdsl_query = [["UST-10LX/", "2016-08-17-13-18-08", 3283]]
  #bdsl_query = [["UST-10LX/", "2016-04-17-20-34-16", 2332]]
  #bdsl_query = [["UST-10LX/", "2016-04-17-20-32-59", 2723],
  #              ["UST-10LX/", "2016-04-17-20-34-16", 2332],
  #              ["UST-10LX/", "2016-08-17-13-08-32", 2649],
  #              ["UST-10LX/", "2016-08-17-13-16-56", 2832]]
  

  bdsl_query = [["UST-10LX/synthetic_composition/", "2016-08-17-13-18-08", 29547]]
  
  #bdsl_query = [["2016-08-17-12-48-06", 403],
  #              ["2016-08-17-12-56-32", 544],
  #              ["2016-08-17-12-57-16", 835],
  #              ["2016-08-17-12-57-54", 672],
  #              ["2016-08-17-12-58-32", 1191],
  #              ["2016-04-17-20-32-59", 2723],
  #              ["2016-04-17-20-34-16", 2332],
  #              ["2016-08-17-13-08-32", 2649],
  #              ["2016-08-17-13-16-56", 2832],
  #              ["2016-02-16-15-46-43", 8971],
  #              ["2016-02-16-16-01-46", 9799],
  #              ["2016-02-16-16-17-06", 7251],
  #              ["2016-02-16-21-18-05", 6498],
  #              ["2016-02-16-21-20-53", 9099]]

  laser_dataset_query = LaserDataset('../../laser_images/full_normalized/', bdsl_query, transform=transform)

  return laser_dataset_query

def SpecialTestSet():
  to_tensor = transforms.ToTensor()
  normalize = transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
  transform = transforms.Compose([to_tensor, normalize])

  #bdsl_test = [["UST-10LX/", "2016-08-17-13-18-08", 3283]]
  #bdsl_test = [["UST-10LX_Natural/", "2016-08-17-13-18-08", 3283]]
  bdsl_test = [["UST-10LX/", "2016-04-17-20-32-59", 2723]]
  #bdsl_test = [["UST-10LX_Natural/", "2016-04-17-20-32-59", 2723]]
  #bdsl_test = [["UST-10LX_Natural/", "2016-04-17-20-34-16", 2332]]
  #bdsl_test = [["UST-10LX_Natural/", "2016-08-17-13-18-08", 50]]
  
  #bdsl_test = [["UST-10LX/", "2016-08-17-13-18-08", 3283]]

  #bdsl_test = [["UST-10LX/static_scenes/", "2018-04-08-15-27-32", 4427]]
  #bdsl_test = [["UST-10LX/static_scenes/", "2018-04-08-15-30-47", 8179]]
  #bdsl_test = [["UST-10LX/static_scenes/", "2018-04-08-15-35-28", 10354]]
  #bdsl_test = [["UST-10LX/static_scenes/", "2018-04-08-15-41-41", 4861]]
  #bdsl_test = [["UST-10LX/static_scenes/", "2018-04-08-15-59-33", 7867]]

  #bdsl_test = [["UST-10LX/", "hand_picked", 10]]
  #laser_dataset_test = LaserDataset('../../laser_images/full_normalized/', bdsl_test, transform=transform)
  laser_dataset_test = LaserDataset('../../laser_images/cartesian/', bdsl_test, transform=transform)

  return laser_dataset_test

def MonteCarloTestSet():
  to_tensor = transforms.ToTensor()
  normalize = transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
  transform = transforms.Compose([to_tensor, normalize])

  bdsl_test = [["UST-10LX/", "MCFeature", 1000]]
  laser_dataset_test = LaserDataset('../../laser_images/full_normalized/', bdsl_test, transform=transform)

  return laser_dataset_test

def FeatureOnlyTestSet():
  to_tensor = transforms.ToTensor()
  normalize = transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
  transform = transforms.Compose([to_tensor, normalize])

  #bdsl_test = [["UST-10LX/", "FeatureOnly", 1]]
  #laser_dataset_test = LaserDataset('../../laser_images/full_normalized/', bdsl_test, transform=transform)
  #bdsl_test = [["", "FeatureOnly", 1]]
  bdsl_test = [["", "FeatureOnly", 11]]
  #bdsl_test = [["", "FeatureOnly", 2]]
  laser_dataset_test = LaserDataset('../../', bdsl_test, transform=transform)

  return laser_dataset_test

class CorruptedLaserDatasets(Dataset):
  """Laser dataset."""

  def __init__(self, sister_set, root_dirs, bag_dates_scan_lengths, transform=None):
      """
      Args:
          bag_dates... ((N, 3) array): Parent dirs, dates, and scan lengths.
          root_dirs list(string): Directories with all the images.
          transform (callable, optional): Optional transform to be applied
              on a sample.
      """
      self.sister_set = sister_set
      self.root_dirs = root_dirs
      self.transform = transform
      self.record = bag_dates_scan_lengths
      total_scans = 0
      for i in range(len(bag_dates_scan_lengths)):
        #print(bag_dates_scan_lengths[i][0]+bag_dates_scan_lengths[i][1])
        total_scans = total_scans + bag_dates_scan_lengths[i][2]

      self.size = total_scans

  def PNGtoNPA(self, file_name):
    im = cv2.imread(file_name)
    return im
  
  def __len__(self):
    return self.size

  def __getitem__(self, idx):
    file_a_base = ""
    file_b_base = ""
    file_a_mid = ""
    file_b_mid = ""

    #window_size = 1
    #window_size = 5
    window_size = 20

    a_idx = idx + 1 # idx is zero indexed and files are 1 indexed
    prev_seen = 0
    seen = 0
    record_idx = 0
    done = False
    while not done:
      #print(prev_seen)
      seen = seen + self.record[record_idx][2]
      #print(seen)
      #print(a_idx)
      if seen >= a_idx:
        done = True
      else:
        record_idx = record_idx + 1

      if done:
        inner_addr = a_idx - prev_seen
        #TODO: select from different corrupted root_dirs
        file_a_base = self.root_dirs[0]+self.record[record_idx][0]+self.record[record_idx][1]+"/"
        file_a_mid = self.record[record_idx][1]+"_"+str(inner_addr)+"_"

      prev_seen = seen

    valid_b = False
    while not valid_b:
      b_idx = random.randint(1, self.size)
      if abs(b_idx - a_idx) > window_size:
        valid_b = True

    prev_seen = 0
    seen = 0
    record_idx = 0
    done = False
    while not done:
      seen = seen + self.record[record_idx][2]
      if seen >= b_idx:
        done = True
      else:
        record_idx = record_idx + 1

      if done:
        inner_addr = b_idx - prev_seen
        #TODO: select from different corrupted root_dirs
        file_b_base = self.root_dirs[0]+self.record[record_idx][0]+self.record[record_idx][1]+"/"
        file_b_mid = self.record[record_idx][1]+"_"+str(inner_addr)+"_"

      prev_seen = seen

    sample_a_norm = self.PNGtoNPA(file_a_base+file_a_mid+"norm.png")
    sample_b_norm = self.PNGtoNPA(file_b_base+file_b_mid+"norm.png")
    sample_a_rot = self.PNGtoNPA(file_a_base+file_a_mid+"rot.png")
    sample_b_rot = self.PNGtoNPA(file_b_base+file_b_mid+"rot.png")
    if self.transform:
      sample_a_norm = self.transform(sample_a_norm)
      sample_b_norm = self.transform(sample_b_norm)
      sample_a_rot = self.transform(sample_a_rot)
      sample_b_rot = self.transform(sample_b_rot)

    sample_a_norm = sample_a_norm[0, :, :]
    sample_a_norm = sample_a_norm.unsqueeze(0)
    sample_b_norm = sample_b_norm[0, :, :]
    sample_b_norm = sample_b_norm.unsqueeze(0)

    sample_a_rot = sample_a_rot[0, :, :]
    sample_a_rot = sample_a_rot.unsqueeze(0)
    sample_b_rot = sample_b_rot[0, :, :]
    sample_b_rot = sample_b_rot.unsqueeze(0)

    sample_aprime_norm, sample_aprime_rot = self.sister_set.getSpecificItem(a_idx-1)

    return sample_a_norm, sample_aprime_norm, sample_b_norm, sample_a_rot, sample_aprime_rot, sample_b_rot


#TODO: rewrite for new data base structure
  def getSpecificItem(self, idx):
    idx = idx + 1
    prev_seen = 0
    seen = 0
    record_idx = 0
    done = False
    while not done:
      seen = seen + self.record[record_idx][2]
      if seen >= idx:
        done = True
      else:
        record_idx = record_idx + 1

      if done:
        inner_addr = idx - prev_seen
        file_base = self.root_dir + self.record[record_idx][0] + self.record[record_idx][1] + "/"
        file_mid = self.record[record_idx][1] + "_" + str(inner_addr) + "_"

      prev_seen = seen

    #print(file_base + file_mid + "norm.png")

    sample_norm = self.PNGtoNPA(file_base + file_mid + "norm.png")
    sample_rot = self.PNGtoNPA(file_base + file_mid + "rot.png")
    if self.transform:
      sample_norm = self.transform(sample_norm)
      sample_rot = self.transform(sample_rot)

    sample_norm = sample_norm[0, :, :]
    sample_norm = sample_norm.unsqueeze(0)
    #sample_norm = sample_norm.unsqueeze(0)

    sample_rot = sample_rot[0, :, :]
    sample_rot = sample_rot.unsqueeze(0)
    #sample_rot = sample_rot.unsqueeze(0)

    return sample_norm, sample_rot

#TODO: rewrite for new data base structure
  def getAddress(self, idx):
    return self.record[idx]









def CorruptedSets(sister_set):
  to_tensor = transforms.ToTensor()
  normalize = transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
  transform = transforms.Compose([to_tensor, normalize])
  
  """
  blur_set = [["UST-10LX/Corrupted_Blur/", "2016-08-17-12-48-06", 403],
              ["UST-10LX/Corrupted_Blur/", "2016-08-17-12-56-32", 544],
              ["UST-10LX/Corrupted_Blur/", "2016-08-17-12-57-16", 835],
              ["UST-10LX/Corrupted_Blur/", "2016-08-17-12-57-54", 672],
              ["UST-10LX/Corrupted_Blur/", "2016-08-17-12-58-32", 1191],
              ["UST-10LX/Corrupted_Blur/", "2016-04-17-20-32-59", 2723],
              ["UST-10LX/Corrupted_Blur/", "2016-04-17-20-34-16", 2332],
              ["UST-10LX/Corrupted_Blur/", "2016-08-17-13-08-32", 2649],
              ["UST-10LX/Corrupted_Blur/", "2016-08-17-13-16-56", 2832],
              ["UST-10LX/Corrupted_Blur/", "2016-02-16-15-46-43", 8971],
              ["UST-10LX/Corrupted_Blur/", "2016-02-16-16-01-46", 9799],
              ["UST-10LX/Corrupted_Blur/", "2016-02-16-16-17-06", 7251],
              ["UST-10LX/Corrupted_Blur/", "2016-02-16-21-18-05", 6498],
              ["UST-10LX/Corrupted_Blur/", "2016-02-16-21-20-53", 9099]]

  salt_set = [["UST-10LX/Corrupted_SaltPepper/", "2016-08-17-12-48-06", 403],
              ["UST-10LX/Corrupted_SaltPepper/", "2016-08-17-12-56-32", 544],
              ["UST-10LX/Corrupted_SaltPepper/", "2016-08-17-12-57-16", 835],
              ["UST-10LX/Corrupted_SaltPepper/", "2016-08-17-12-57-54", 672],
              ["UST-10LX/Corrupted_SaltPepper/", "2016-08-17-12-58-32", 1191],
              ["UST-10LX/Corrupted_SaltPepper/", "2016-04-17-20-32-59", 2723],
              ["UST-10LX/Corrupted_SaltPepper/", "2016-04-17-20-34-16", 2332],
              ["UST-10LX/Corrupted_SaltPepper/", "2016-08-17-13-08-32", 2649],
              ["UST-10LX/Corrupted_SaltPepper/", "2016-08-17-13-16-56", 2832],
              ["UST-10LX/Corrupted_SaltPepper/", "2016-02-16-15-46-43", 8971],
              ["UST-10LX/Corrupted_SaltPepper/", "2016-02-16-16-01-46", 9799],
              ["UST-10LX/Corrupted_SaltPepper/", "2016-02-16-16-17-06", 7251],
              ["UST-10LX/Corrupted_SaltPepper/", "2016-02-16-21-18-05", 6498],
              ["UST-10LX/Corrupted_SaltPepper/", "2016-02-16-21-20-53", 9099]]

  """
  """
  corrupted_set = [["", "2016-08-17-12-48-06", 403],
                   ["", "2016-08-17-12-56-32", 544],
                   ["", "2016-08-17-12-57-16", 835],
                   ["", "2016-08-17-12-57-54", 672],
                   ["", "2016-08-17-12-58-32", 1191],
                   ["", "2016-04-17-20-32-59", 2723],
                   ["", "2016-04-17-20-34-16", 2332],
                   ["", "2016-08-17-13-08-32", 2649],
                   ["", "2016-08-17-13-16-56", 2832],
                   ["", "2016-02-16-15-46-43", 8971],
                   ["", "2016-02-16-16-01-46", 9799],
                   ["", "2016-02-16-16-17-06", 7251],
                   ["", "2016-02-16-21-18-05", 6498],
                   ["", "2016-02-16-21-20-53", 9099],
                   ["", "2016-08-17-22-05-52", 67149]]
  """
  corrupted_set = [["", "2016-04-17-20-32-59", 2723],
                   ["", "2016-04-17-20-34-16", 2332],
                   ["", "2016-08-17-13-08-32", 2649],
                   ["", "2016-08-17-13-16-56", 2832],
                   ["", "2016-08-17-13-18-08", 3283]]


  #root_dirs = ["UST-10LX/Corrupted_Blur/", "UST-10LX/Corrupted_SaltPepper/", "UST-10LX/Corrupted_Humans/"]
  #root_dirs = ["../../laser_images/full_normalized/UST-10LX/Corrupted_Blur/"]
  root_dirs = ["../../laser_images/full_normalized/UST-10LX_Natural/Corrupted_Blur/"]

  corrupted_dataset = CorruptedLaserDatasets(sister_set, root_dirs, corrupted_set, transform=transform)

  train_loader = torch.utils.data.DataLoader(corrupted_dataset, batch_size=16, shuffle=True)
  #test_loader = torch.utils.data.DataLoader(laser_dataset_test, batch_size=4, shuffle=False)

  return train_loader









class SyntheticObjectLaserDatasets(Dataset):
  """Laser dataset."""

  def __init__(self, sister_set, root_dirs, bag_dates_scan_lengths, transform=None):
      """
      Args:
          bag_dates... ((N, 3) array): Parent dirs, dates, and scan lengths.
          root_dirs list(string): Directories with all the images.
          transform (callable, optional): Optional transform to be applied
              on a sample.
      """
      self.sister_set = sister_set
      self.root_dirs = root_dirs
      self.transform = transform
      self.record = bag_dates_scan_lengths
      total_scans = 0
      for i in range(len(bag_dates_scan_lengths)):
        #print(bag_dates_scan_lengths[i][0]+bag_dates_scan_lengths[i][1])
        total_scans = total_scans + bag_dates_scan_lengths[i][2]

      self.size = total_scans

  def PNGtoNPA(self, file_name):
    im = cv2.imread(file_name)
    return im
  
  def __len__(self):
    return self.size

  def __getitem__(self, idx):
    file_a_base = ""
    file_b_base = ""
    file_a_mid = ""
    file_b_mid = ""

    #window_size = 5
    window_size = 20

    a_idx = idx + 1 # idx is zero indexed and files are 1 indexed
    prev_seen = 0
    seen = 0
    record_idx = 0
    done = False
    while not done:
      #print(prev_seen)
      seen = seen + self.record[record_idx][2]
      #print(seen)
      #print(a_idx)
      if seen >= a_idx:
        done = True
      else:
        record_idx = record_idx + 1

      if done:
        inner_addr = a_idx - prev_seen
        #TODO: select from different corrupted root_dirs
        file_a_base = self.root_dirs[0]+self.record[record_idx][0]+self.record[record_idx][1]+"/"
        file_a_mid = self.record[record_idx][1]+"_"+str(inner_addr)+"_"

      prev_seen = seen

    valid_b = False
    while not valid_b:
      b_idx = random.randint(1, self.size)
      if abs(b_idx - a_idx) > window_size:
        valid_b = True

    prev_seen = 0
    seen = 0
    record_idx = 0
    done = False
    while not done:
      seen = seen + self.record[record_idx][2]
      if seen >= b_idx:
        done = True
      else:
        record_idx = record_idx + 1

      if done:
        inner_addr = b_idx - prev_seen
        #TODO: select from different corrupted root_dirs
        file_b_base = self.root_dirs[0]+self.record[record_idx][0]+self.record[record_idx][1]+"/"
        file_b_mid = self.record[record_idx][1]+"_"+str(inner_addr)+"_"

      prev_seen = seen

    asynth_norm = self.PNGtoNPA(file_a_base+file_a_mid+"norm.png")
    bsynth_norm = self.PNGtoNPA(file_b_base+file_b_mid+"norm.png")
    asynth_rot = self.PNGtoNPA(file_a_base+file_a_mid+"rot.png")
    bsynth_rot = self.PNGtoNPA(file_b_base+file_b_mid+"rot.png")
    if self.transform:
      asynth_norm = self.transform(asynth_norm)
      bsynth_norm = self.transform(bsynth_norm)
      asynth_rot = self.transform(asynth_rot)
      bsynth_rot = self.transform(bsynth_rot)

    asynth_norm = asynth_norm[0, :, :]
    asynth_norm = asynth_norm.unsqueeze(0)
    bsynth_norm = bsynth_norm[0, :, :]
    bsynth_norm = bsynth_norm.unsqueeze(0)

    asynth_rot = asynth_rot[0, :, :]
    asynth_rot = asynth_rot.unsqueeze(0)
    bsynth_rot = bsynth_rot[0, :, :]
    bsynth_rot = bsynth_rot.unsqueeze(0)

    b_norm, b_rot = self.sister_set.getSpecificItem(b_idx-1)

    #print(asynth_norm.shape)
    #print(bsynth_norm.shape)
    #print(b_norm.shape)

    # a' should be closer to b' than to b
    # ' denotes synthetic object present in scan
    return asynth_norm, bsynth_norm, b_norm, asynth_rot, bsynth_rot, b_rot


#TODO: rewrite for new data base structure
  def getSpecificItem(self, idx):
    idx = idx + 1
    prev_seen = 0
    seen = 0
    record_idx = 0
    done = False
    while not done:
      seen = seen + self.record[record_idx][2]
      if seen >= idx:
        done = True
      else:
        record_idx = record_idx + 1

      if done:
        inner_addr = idx - prev_seen
        file_base = self.root_dir + self.record[record_idx][0] + self.record[record_idx][1] + "/"
        file_mid = self.record[record_idx][1] + "_" + str(inner_addr) + "_"

      prev_seen = seen

    #print(file_base + file_mid + "norm.png")

    sample_norm = self.PNGtoNPA(file_base + file_mid + "norm.png")
    sample_rot = self.PNGtoNPA(file_base + file_mid + "rot.png")
    if self.transform:
      sample_norm = self.transform(sample_norm)
      sample_rot = self.transform(sample_rot)

    sample_norm = sample_norm[0, :, :]
    sample_norm = sample_norm.unsqueeze(0)
    #sample_norm = sample_norm.unsqueeze(0)

    sample_rot = sample_rot[0, :, :]
    sample_rot = sample_rot.unsqueeze(0)
    #sample_rot = sample_rot.unsqueeze(0)

    return sample_norm, sample_rot

#TODO: rewrite for new data base structure
  def getAddress(self, idx):
    return self.record[idx]





def ObjectifiedSets(sister_set):
  to_tensor = transforms.ToTensor()
  normalize = transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
  transform = transforms.Compose([to_tensor, normalize])
  
  """
  humn_set = [["UST-10LX/Corrupted_Humans/", "2016-08-17-12-48-06", 403],
              ["UST-10LX/Corrupted_Humans/", "2016-08-17-12-56-32", 544],
              ["UST-10LX/Corrupted_Humans/", "2016-08-17-12-57-16", 835],
              ["UST-10LX/Corrupted_Humans/", "2016-08-17-12-57-54", 672],
              ["UST-10LX/Corrupted_Humans/", "2016-08-17-12-58-32", 1191],
              ["UST-10LX/Corrupted_Humans/", "2016-04-17-20-32-59", 2723],
              ["UST-10LX/Corrupted_Humans/", "2016-04-17-20-34-16", 2332],
              ["UST-10LX/Corrupted_Humans/", "2016-08-17-13-08-32", 2649],
              ["UST-10LX/Corrupted_Humans/", "2016-08-17-13-16-56", 2832],
              ["UST-10LX/Corrupted_Humans/", "2016-02-16-15-46-43", 8971],
              ["UST-10LX/Corrupted_Humans/", "2016-02-16-16-01-46", 9799],
              ["UST-10LX/Corrupted_Humans/", "2016-02-16-16-17-06", 7251],
              ["UST-10LX/Corrupted_Humans/", "2016-02-16-21-18-05", 6498],
              ["UST-10LX/Corrupted_Humans/", "2016-02-16-21-20-53", 9099]]
  """
  """
  objectified_set = [["", "2016-08-17-12-48-06", 403],
                     ["", "2016-08-17-12-56-32", 544],
                     ["", "2016-08-17-12-57-16", 835],
                     ["", "2016-08-17-12-57-54", 672],
                     ["", "2016-08-17-12-58-32", 1191],
                     ["", "2016-04-17-20-32-59", 2723],
                     ["", "2016-04-17-20-34-16", 2332],
                     ["", "2016-08-17-13-08-32", 2649],
                     ["", "2016-08-17-13-16-56", 2832],
                     ["", "2016-02-16-15-46-43", 8971],
                     ["", "2016-02-16-16-01-46", 9799],
                     ["", "2016-02-16-16-17-06", 7251],
                     ["", "2016-02-16-21-18-05", 6498],
                     ["", "2016-02-16-21-20-53", 9099],
                     ["", "2016-08-17-22-05-52", 67149]]
  """
  objectified_set = [["", "2016-04-17-20-32-59", 2723],
                     ["", "2016-04-17-20-34-16", 2332],
                     ["", "2016-08-17-13-08-32", 2649],
                     ["", "2016-08-17-13-16-56", 2832]]

  #root_dirs = ["UST-10LX/Corrupted_Blur/", "UST-10LX/Corrupted_SaltPepper/", "UST-10LX/Corrupted_Humans/"]
  root_dirs = ["../../laser_images/full_normalized/UST-10LX/Corrupted_Humans/"]

  objectified_dataset = SyntheticObjectLaserDatasets(sister_set, root_dirs, objectified_set, transform=transform)

  train_loader = torch.utils.data.DataLoader(objectified_dataset, batch_size=16, shuffle=True)
  #test_loader = torch.utils.data.DataLoader(laser_dataset_test, batch_size=4, shuffle=False)

  return train_loader



class SyntheticCrossoverLaserDatasets(Dataset):
  """Laser dataset."""

  def __init__(self, root_dirs, bag_dates_scan_lengths, transform=None):
      """
      Args:
          bag_dates... ((N, 3) array): Parent dirs, dates, and scan lengths.
          root_dirs list(string): Directories with all the images.
          transform (callable, optional): Optional transform to be applied
              on a sample.
      """
      self.root_dirs = root_dirs
      self.transform = transform
      self.record = bag_dates_scan_lengths
      total_scans = 0
      for i in range(len(bag_dates_scan_lengths)):
        #print(bag_dates_scan_lengths[i][0]+bag_dates_scan_lengths[i][1])
        total_scans = total_scans + bag_dates_scan_lengths[i][2]

      self.size = total_scans

  def PNGtoNPA(self, file_name):
    im = cv2.imread(file_name)
    return im
  
  def __len__(self):
    return self.size

  def __getitem__(self, idx):
    file_a_base = ""
    file_b_base = ""
    file_a_mid = ""
    file_b_mid = ""

    ##window_size = 5
    window_size = 20

    a_idx = idx + 1 # idx is zero indexed and files are 1 indexed
    prev_seen = 0
    seen = 0
    record_idx = 0
    done = False
    while not done:
      #print(prev_seen)
      seen = seen + self.record[record_idx][2]
      #print(seen)
      #print(a_idx)
      if seen >= a_idx:
        done = True
      else:
        record_idx = record_idx + 1

      if done:
        inner_addr = a_idx - prev_seen
        #TODO: select from different corrupted root_dirs
        file_a_base = self.root_dirs[0]+self.record[record_idx][0]+self.record[record_idx][1]+"/"
        file_a_mid = self.record[record_idx][1]+"_"+str(inner_addr)+"_"

      prev_seen = seen

    valid_b = False
    while not valid_b:
      b_idx = random.randint(1, self.size)
      if abs(b_idx - a_idx) > window_size:
        valid_b = True

    prev_seen = 0
    seen = 0
    record_idx = 0
    done = False
    while not done:
      seen = seen + self.record[record_idx][2]
      if seen >= b_idx:
        done = True
      else:
        record_idx = record_idx + 1

      if done:
        inner_addr = b_idx - prev_seen
        #TODO: select from different corrupted root_dirs
        file_b_base = self.root_dirs[0]+self.record[record_idx][0]+self.record[record_idx][1]+"/"
        file_b_mid = self.record[record_idx][1]+"_"+str(inner_addr)+"_"

      prev_seen = seen

    a_norm = self.PNGtoNPA(file_a_base+file_a_mid+"norm.png")
    feat_norm = self.PNGtoNPA(file_a_base+file_a_mid+"norm.png")
    b_norm = self.PNGtoNPA(file_b_base+file_b_mid+"norm.png")
    a_rot = self.PNGtoNPA(file_a_base+file_a_mid+"rot.png")
    feat_rot = self.PNGtoNPA(file_a_base+file_a_mid+"rot.png")
    b_rot = self.PNGtoNPA(file_b_base+file_b_mid+"rot.png")
    if self.transform:
      a_norm = self.transform(a_norm)
      feat_norm = self.transform(feat_norm)
      b_norm = self.transform(b_norm)
      a_rot = self.transform(a_rot)
      feat_rot = self.transform(feat_rot)
      b_rot = self.transform(b_rot)

    a_norm = a_norm[0, :, :]
    #a_norm = a_norm.unsqueeze(0)
    a_norm = a_norm.unsqueeze(0)
    feat_norm = feat_norm[0, :, :]
    #feat_norm = feat_norm.unsqueeze(0)
    feat_norm = feat_norm.unsqueeze(0)
    b_norm = b_norm[0, :, :]
    #b_norm = b_norm.unsqueeze(0)
    b_norm = b_norm.unsqueeze(0)

    a_rot = a_rot[0, :, :]
    #a_rot = a_rot.unsqueeze(0)
    a_rot = a_rot.unsqueeze(0)
    feat_rot = feat_rot[0, :, :]
    #feat_rot = feat_rot.unsqueeze(0)
    feat_rot = feat_rot.unsqueeze(0)
    b_rot = b_rot[0, :, :]
    #b_rot = b_rot.unsqueeze(0)
    b_rot = b_rot.unsqueeze(0)

    min_feature_size = 10
    feat_idx1 = random.randint(32, 224) ##don't select parts which are always zero
    feat_idx2 = random.randint(32, 224)
    while abs(feat_idx1 - feat_idx2) < min_feature_size:
      feat_idx2 = random.randint(32, 224)

    feat_start = min(feat_idx1, feat_idx2)
    feat_end = max(feat_idx1, feat_idx2)

    ##TODO: vectorize?
    for i in range(256):
      if i < feat_start or i > feat_end:
        feat_norm[0, 0, i] = 0.0

    crossover = random.random()
    #label = np.array([1, 0])
    label = np.array([0])
    if crossover > 0.5:
      #label = np.array([0, 1])
      label = np.array([1])
      for i in range(feat_start, feat_end):
        b_norm[0, 0, i] = a_norm[0, 0, i] #(exact copy) (TODO: add noise, different location)
    
    label = torch.from_numpy(label)
    #print(label.shape)

    return a_norm, feat_norm, b_norm, a_rot, feat_rot, b_rot, label


#TODO: rewrite for new data base structure
  def getSpecificItem(self, idx):
    idx = idx + 1
    prev_seen = 0
    seen = 0
    record_idx = 0
    done = False
    while not done:
      seen = seen + self.record[record_idx][2]
      if seen >= idx:
        done = True
      else:
        record_idx = record_idx + 1

      if done:
        inner_addr = idx - prev_seen
        file_base = self.root_dir + self.record[record_idx][0] + self.record[record_idx][1] + "/"
        file_mid = self.record[record_idx][1] + "_" + str(inner_addr) + "_"

      prev_seen = seen

    #print(file_base + file_mid + "norm.png")

    sample_norm = self.PNGtoNPA(file_base + file_mid + "norm.png")
    sample_rot = self.PNGtoNPA(file_base + file_mid + "rot.png")
    if self.transform:
      sample_norm = self.transform(sample_norm)
      sample_rot = self.transform(sample_rot)

    sample_norm = sample_norm[0, :, :]
    sample_norm = sample_norm.unsqueeze(0)
    #sample_norm = sample_norm.unsqueeze(0)

    sample_rot = sample_rot[0, :, :]
    sample_rot = sample_rot.unsqueeze(0)
    #sample_rot = sample_rot.unsqueeze(0)

    return sample_norm, sample_rot

#TODO: rewrite for new data base structure
  def getAddress(self, idx):
    return self.record[idx]



def CrossedOverSets():
  to_tensor = transforms.ToTensor()
  normalize = transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
  transform = transforms.Compose([to_tensor, normalize])

  #crossover_set = [["", "2016-04-17-20-32-59", 2723]]
  #crossover_set = [["", "2016-04-17-20-32-59", 2722]]
 
  #crossover_set = [["", "2016-04-17-20-34-16", 2332]]
  crossover_set = [["", "2016-04-17-20-32-59", 2723],
                   ["", "2016-04-17-20-34-16", 2332],
                   ["", "2016-08-17-13-08-32", 2649],
                   ["", "2016-08-17-13-16-56", 2832]]
 #crossover_set = [["", "2016-04-17-20-32-59", 2723],
  #                 ["", "2016-04-17-20-34-16", 2332],
  #                 ["", "2016-08-17-13-08-32", 2649],
  #                 ["", "2016-08-17-13-16-56", 2832]]

  crossover_test = [["", "2016-08-17-13-18-08", 256]] #3283

  root_dirs = ["../../laser_images/full_normalized/UST-10LX_Natural/"]

  crossover_dataset = SyntheticCrossoverLaserDatasets(root_dirs, crossover_set, transform=transform)
  crossover_dataset_test = SyntheticCrossoverLaserDatasets(root_dirs, crossover_test, transform=transform)

  #train_loader = torch.utils.data.DataLoader(crossover_dataset, batch_size=2, shuffle=True)
  #train_loader = torch.utils.data.DataLoader(crossover_dataset, batch_size=128, shuffle=True)
  train_loader = torch.utils.data.DataLoader(crossover_dataset, batch_size=16, shuffle=True)
  test_loader = torch.utils.data.DataLoader(crossover_dataset_test, batch_size=4, shuffle=False)

  return train_loader, test_loader





























































class LaserDatasetSimTriplets(Dataset):
  """Laser dataset."""

  def __init__(self, root_dir, bag_dates_scan_lengths, transform=None):
    """
    Args:
      bag_dates... ((N, 3) array): Parent dirs, dates, and scan lengths.
      root_dir (string): Directory with all the images.
      transform (callable, optional): Optional transform to be applied on a sample.
    """
    self.root_dir = root_dir
    self.transform = transform
    self.record = bag_dates_scan_lengths
    total_scans = 0
    for i in range(len(bag_dates_scan_lengths)):
      total_scans = total_scans + bag_dates_scan_lengths[i][2]

    self.size = total_scans
    self.gaussian = False
    self.salt_pepper = False

  def PNGtoNPA(self, file_name):
    im = cv2.imread(file_name)
    return im

  def __len__(self):
    return self.size

  def __getitem__(self, idx):
    b_idx = random.randint(1, self.size)
    scan_A = getSpecificItem(idx)
    scan_B = getSpecificItem(b_idx)
    scan_Q = copy.deepcopy(scan_A)
    if False:
      scan_Q = copy.deepcopy(scan_B)

    #TODO: construct scan_Q by randomly (or not) deciding which curriculum to apply:
    if False:
      scan_Q = addNoise(scan_Q)

    if False:
      scan_Q = crossover(scan_A, scan_B, scan_Q)
    elif False:
      scan_Q = addNoise(scan_Q)


    if False:
      scan_Q = selectSubset(scan_A, scan_B, scan_Q)
    elif False:
      scan_Q = addNoise(scan_Q)

    #scan_Q = masking()


    return scan_A, scan_B, scan_Q

  def getSpecificItem(self, idx):
    file_base = ""
    file_mid = ""

    idx = idx + 1 # idx is zero indexed and files are 1 indexed
    prev_seen = 0
    seen = 0
    record_idx = 0
    done = False
    while not done:
      seen = seen + self.record[record_idx][2]
      if seen >= idx:
        done = True
      else:
        record_idx = record_idx + 1

      if done:
        inner_addr = idx - prev_seen
        file_base = self.root_dir+self.record[record_idx][0]+self.record[record_idx][1]+"/"
        file_mid = self.record[record_idx][1]+"_"+str(inner_addr)

      prev_seen = seen

    scan = self.PNGtoNPA(file_base+file_mid+".png")
    if self.transform:
      scan = self.transform(scan)

    scan = scan[0, :, :]
    scan = scan.unsqueeze(0)

    return scan

  def getAddress(self, idx):
    return self.record[idx]


  def addGaussianNoise(scan_img):
    print("todo")
    return scan_img

  def addSaltPepperNoise(scan_img):
    print("todo")
    return scan_img
  
  def addNoise(scan_Q):
    if self.gaussian:
      scan_Q = addGaussianNoise(scan_Q)
    if self.salt_pepper:
      scan_Q = addSaltPepperNoise(scan_Q)


    return scan_Q

  def crossover(scan_A, scan_B):
    return crossed_over_scan

  def selectSubset(superset_scan, selection_window):
    return subset_scan

  def masking():
    print("todo")









class LaserDataset(Dataset):
  """Laser dataset."""

  def __init__(self, root_dir, bag_dates_scan_lengths, transform=None):
    """
    Args:
      bag_dates... ((N, 3) array): Parent dirs, dates, and scan lengths.
      root_dir (string): Directory with all the images.
      transform (callable, optional): Optional transform to be applied on a sample.
    """
    self.root_dir = root_dir
    self.transform = transform
    self.record = bag_dates_scan_lengths
    total_scans = 0
    for i in range(len(bag_dates_scan_lengths)):
      total_scans = total_scans + bag_dates_scan_lengths[i][2]

    self.size = total_scans
    self.img_width = 256
    self.img_height = 256
    self.img_size = self.img_height * self.img_width
    self.sp_rate = 0.01 #probability of s&p for any given pixel
    self.clip_range = self.img_width / 4
    self.rotation_range = 45 #degrees
    self.min_subset_subtend = 20
    self.max_subset_subtend = 200
    self.field_of_view = 270
    self.start_angle = -135

  def PNGtoNPA(self, file_name):
    im = cv2.imread(file_name)
#    im = im[:, :, 0]
    return im

  def __len__(self):
    return self.size

  def __getitem__(self, idx):
    input_scan = self.getSpecificItem(idx)
    recreation_target_scan = copy.deepcopy(input_scan)

    #print(input_scan)
    ofname = "presubinput.png"
    scipy.misc.imsave(ofname, input_scan)
    rfname = "presubrec.png"
    scipy.misc.imsave(rfname, recreation_target_scan)

    #TODO: with some probability, invoke one or more of the following:
    #TODO: implement gaussina noise .... maybe if we go to higher resolution
    #input_scan = addGaussianNoise(input_scan)

    #input_scan = self.addSaltPepperNoise(input_scan)
    #input_scan, recreation_target_scan = self.induceClip(input_scan, recreation_target_scan)
    #input_scan, recreation_target_scan = self.induceFlipY(input_scan, recreation_target_scan)
    #input_scan, recreation_target_scan = self.induceFlipX(input_scan, recreation_target_scan)
    #input_scan, recreation_target_scan = self.induceRotation(input_scan, recreation_target_scan)
    input_scan, recreation_target_scan = self.selectSubset(input_scan, recreation_target_scan)

    #print(input_scan)
    ofname = "input.png"
    scipy.misc.imsave(ofname, input_scan)
    rfname = "rec.png"
    scipy.misc.imsave(rfname, recreation_target_scan)

    input_scan = self.transformForTorch(input_scan)
    recreation_target_scan = self.transformForTorch(recreation_target_scan)

    return input_scan, recreation_target_scan

  def transformForTorch(self, scan):
    if self.transform:
      scan = self.transform(scan)

    scan = scan[0, :, :]
    scan = scan.unsqueeze(0)

    return scan

  def getSpecificItem(self, idx):
    file_base = ""
    file_mid = ""

    idx = idx + 1 # idx is zero indexed and files are 1 indexed
    prev_seen = 0
    seen = 0
    record_idx = 0
    done = False
    while not done:
      seen = seen + self.record[record_idx][2]
      if seen >= idx:
        done = True
      else:
        record_idx = record_idx + 1

      if done:
        inner_addr = idx - prev_seen
        file_base = self.root_dir+self.record[record_idx][0]+self.record[record_idx][1]+"/"
        file_mid = self.record[record_idx][1]+"_"+str(inner_addr)

      prev_seen = seen

    scan = self.PNGtoNPA(file_base+file_mid+".png")

    return scan

  def addGaussianNoise(self, scan_img):
    print("todo")
    return scan_img

  def addSaltPepperNoise(self, scan_img):
    for i in range(int(self.sp_rate * self.img_size)):
      col = random.randint(0, self.img_width - 1)
      row = random.randint(0, self.img_height - 1)
      if scan_img[row, col].all() > 0.5:
        scan_img[row, col, :] = 0
      else:
        scan_img[row, col, :] = 255
    return scan_img

  def induceClip(self, input_scan_img, recreation_target_img):
    nx = self.img_width
    ny = self.img_height
    x = np.arange(nx) - (nx - 1) / 2.0
    y = np.arange(ny) - (ny - 1) / 2.0
    X, Y = np.meshgrid(x, y)
    d_mask = np.sqrt(X**2 + Y**2)
    input_scan_img[d_mask > self.clip_range] = 0
    recreation_target_img[d_mask > self.clip_range] = 0

    return input_scan_img, recreation_target_img

  def induceFlipX(self, input_scan_img, recreation_target_img):
    input_scan_img[:, :, 0] = np.flip(input_scan_img[:, :, 0], 1)
    recreation_target_img[:, :, 0] = np.flip(recreation_target_img[:, :, 0], 1)
    input_scan_img[:, :, 1] = np.flip(input_scan_img[:, :, 1], 1)
    recreation_target_img[:, :, 1] = np.flip(recreation_target_img[:, :, 1], 1)
    input_scan_img[:, :, 2] = np.flip(input_scan_img[:, :, 2], 1)
    recreation_target_img[:, :, 2] = np.flip(recreation_target_img[:, :, 2], 1)
    return input_scan_img, recreation_target_img

  def induceFlipY(self, input_scan_img, recreation_target_img):
    input_scan_img[:, :, 0] = np.flip(input_scan_img[:, :, 0], 0)
    recreation_target_img[:, :, 0] = np.flip(recreation_target_img[:, :, 0], 0)
    input_scan_img[:, :, 1] = np.flip(input_scan_img[:, :, 1], 0)
    recreation_target_img[:, :, 1] = np.flip(recreation_target_img[:, :, 1], 0)
    input_scan_img[:, :, 2] = np.flip(input_scan_img[:, :, 2], 0)
    recreation_target_img[:, :, 2] = np.flip(recreation_target_img[:, :, 2], 0)
    return input_scan_img, recreation_target_img

  def induceRotation(self, input_scan_img, recreation_target_img):
    rotation_angle = random.randint(-self.rotation_range, self.rotation_range)
    input_scan_img = scipy.ndimage.rotate(input_scan_img, rotation_angle, reshape=False)
    recreation_target_img = scipy.ndimage.rotate(recreation_target_img, rotation_angle, reshape=False)
    return input_scan_img, recreation_target_img

  def selectSubset(self, input_scan_img, recreation_target_img):
    subset_size = random.randint(self.min_subset_subtend, self.max_subset_subtend)
    subset_start_angle = random.randint(self.start_angle, self.start_angle + self.field_of_view - subset_size)
    subset_end_angle = subset_start_angle + subset_size
    #TODO: find mask between angles
    return input_scan_img, recreation_target_img

  def getAddress(self, idx):
    return self.record[idx]



def CurateTrainTest():

  to_tensor = transforms.ToTensor()
  normalize = transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
  transform = transforms.Compose([to_tensor, normalize])

  bdsl_train = [["UST-10LX/", "2016-04-17-20-32-59", 2723]]

  laser_dataset_train = LaserDataset('../../laser_images/cartesian/', bdsl_train, transform=transform)

  #bdsl_test = [["UST-10LX/", "2016-08-17-13-18-08", 64]]
  bdsl_test = [["UST-10LX/", "2016-04-17-20-32-59", 64]]

  laser_dataset_test = LaserDataset('../../laser_images/cartesian/', bdsl_test, transform=transform)

  print("Training dataset size: ")
  print(len(laser_dataset_train))
  print("Testing dataset size: ")
  print(len(laser_dataset_test))

  #train_loader = torch.utils.data.DataLoader(laser_dataset_train, batch_size=16, shuffle=True)
  #test_loader = torch.utils.data.DataLoader(laser_dataset_test, batch_size=4, shuffle=False)
  #return train_loader, test_loader

  return laser_dataset_train, laser_dataset_test
